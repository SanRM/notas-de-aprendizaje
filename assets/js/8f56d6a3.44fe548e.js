"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[8242],{6625:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var s=a(4848),r=a(8453);const o={sidebar_position:22},i=void 0,l={id:"Frameworks/Angular/Pipes/Pipes",title:"Pipes",description:'Los Pipes en Angular son funciones que transforman datos en las plantillas de una manera r\xe1pida y sencilla. Estos pipes son "funciones puras", lo que significa que no generan efectos secundarios, sino que toman un valor de entrada, lo transforman y devuelven un resultado. Angular incluye varios pipes integrados que podemos importar y utilizar, y tambi\xe9n permite crear pipes personalizados seg\xfan nuestras necesidades.',source:"@site/docs/Frameworks/Angular/Pipes/Pipes.md",sourceDirName:"Frameworks/Angular/Pipes",slug:"/Frameworks/Angular/Pipes/",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Pipes/",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Frameworks/Angular/Pipes/Pipes.md",tags:[],version:"current",lastUpdatedBy:"SanRM",lastUpdatedAt:1730678194e3,sidebarPosition:22,frontMatter:{sidebar_position:22},sidebar:"tutorialSidebar",previous:{title:"Validaci\xf3n de Formularios",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Formularios/Validaci\xf3n de Formularios"},next:{title:"Formateo de datos con pipes en angular",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Pipes/Formateo de datos con pipes en angular"}},p={},d=[{value:"<strong>Ejemplo</strong>: Transformaci\xf3n de Datos con Pipes Integrados",id:"ejemplo-transformaci\xf3n-de-datos-con-pipes-integrados",level:3},{value:"Paso 1: Importar el Pipe en el Componente",id:"paso-1-importar-el-pipe-en-el-componente",level:4},{value:"Paso 2: Agregar el Pipe en la Configuraci\xf3n del Componente",id:"paso-2-agregar-el-pipe-en-la-configuraci\xf3n-del-componente",level:4},{value:"<strong>Tu Turno</strong>: Usando el Pipe <code>lowercase</code>",id:"tu-turno-usando-el-pipe-lowercase",level:3},{value:"Paso 1: Importar el Pipe <code>LowerCasePipe</code>",id:"paso-1-importar-el-pipe-lowercasepipe",level:4},{value:"Paso 2: Agregar el Pipe a la Configuraci\xf3n del Componente",id:"paso-2-agregar-el-pipe-a-la-configuraci\xf3n-del-componente",level:4},{value:"Paso 3: Usar el Pipe en la Plantilla",id:"paso-3-usar-el-pipe-en-la-plantilla",level:4}];function t(e){const n={code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components},{Card:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Los ",(0,s.jsx)(n.strong,{children:"Pipes"}),' en Angular son funciones que transforman datos en las plantillas de una manera r\xe1pida y sencilla. Estos pipes son "funciones puras", lo que significa que no generan efectos secundarios, sino que toman un valor de entrada, lo transforman y devuelven un resultado. Angular incluye varios pipes integrados que podemos importar y utilizar, y tambi\xe9n permite crear pipes personalizados seg\xfan nuestras necesidades.']}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsxs)(a,{children:[(0,s.jsxs)(n.h3,{id:"ejemplo-transformaci\xf3n-de-datos-con-pipes-integrados",children:[(0,s.jsx)(n.strong,{children:"Ejemplo"}),": Transformaci\xf3n de Datos con Pipes Integrados"]}),(0,s.jsxs)(n.p,{children:["Supongamos que queremos mostrar un mensaje en may\xfasculas. Para esto, usaremos el pipe ",(0,s.jsx)(n.code,{children:"uppercase"}),", que convierte el texto a may\xfasculas."]})]}),(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h4,{id:"paso-1-importar-el-pipe-en-el-componente",children:"Paso 1: Importar el Pipe en el Componente"}),(0,s.jsxs)(n.p,{children:["Primero, importemos ",(0,s.jsx)(n.code,{children:"UpperCasePipe"})," desde ",(0,s.jsx)(n.code,{children:"@angular/common"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { UpperCasePipe } from '@angular/common';\n"})})]}),(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h4,{id:"paso-2-agregar-el-pipe-en-la-configuraci\xf3n-del-componente",children:"Paso 2: Agregar el Pipe en la Configuraci\xf3n del Componente"}),(0,s.jsxs)(n.p,{children:["Luego, debemos declarar el pipe en la propiedad ",(0,s.jsx)(n.code,{children:"imports"})," del decorador ",(0,s.jsx)(n.code,{children:"@Component()"})," para que est\xe9 disponible en la plantilla del componente:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@Component({\r\n    ...\r\n    template: `{{ loudMessage | uppercase }}`,\r\n    imports: [UpperCasePipe],\r\n})\r\nclass AppComponent {\r\n    loudMessage = 'we think you are doing great!';\r\n}\n"})}),(0,s.jsxs)(n.p,{children:["En este ejemplo, ",(0,s.jsx)(n.code,{children:"{{ loudMessage | uppercase }}"})," aplica el pipe ",(0,s.jsx)(n.code,{children:"uppercase"})," a la propiedad ",(0,s.jsx)(n.code,{children:"loudMessage"}),", transformando el texto a may\xfasculas, y el resultado en la plantilla ser\xeda: ",(0,s.jsx)(n.strong,{children:'"WE THINK YOU ARE DOING GREAT!"'}),"."]})]})]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsxs)(n.h3,{id:"tu-turno-usando-el-pipe-lowercase",children:[(0,s.jsx)(n.strong,{children:"Tu Turno"}),": Usando el Pipe ",(0,s.jsx)(n.code,{children:"lowercase"})]}),(0,s.jsxs)(n.p,{children:["Intentemos transformar un texto a min\xfasculas usando el pipe ",(0,s.jsx)(n.code,{children:"lowercase"}),":"]}),(0,s.jsxs)(a,{children:[(0,s.jsxs)(n.h4,{id:"paso-1-importar-el-pipe-lowercasepipe",children:["Paso 1: Importar el Pipe ",(0,s.jsx)(n.code,{children:"LowerCasePipe"})]}),(0,s.jsxs)(n.p,{children:["Para esto, importemos ",(0,s.jsx)(n.code,{children:"LowerCasePipe"})," desde ",(0,s.jsx)(n.code,{children:"@angular/common"}),":"]}),(0,s.jsx)(a,{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { LowerCasePipe } from '@angular/common';\n"})})})]}),(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h4,{id:"paso-2-agregar-el-pipe-a-la-configuraci\xf3n-del-componente",children:"Paso 2: Agregar el Pipe a la Configuraci\xf3n del Componente"}),(0,s.jsxs)(n.p,{children:["A\xf1adimos el pipe en la configuraci\xf3n del decorador ",(0,s.jsx)(n.code,{children:"@Component()"})," para habilitarlo en la plantilla:"]}),(0,s.jsx)(a,{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@Component({\r\n    ...\r\n    imports: [LowerCasePipe]\r\n})\n"})})})]}),(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h4,{id:"paso-3-usar-el-pipe-en-la-plantilla",children:"Paso 3: Usar el Pipe en la Plantilla"}),(0,s.jsxs)(n.p,{children:["Finalmente, actualicemos la plantilla para aplicar el pipe ",(0,s.jsx)(n.code,{children:"lowercase"})," en la propiedad ",(0,s.jsx)(n.code,{children:"username"}),":"]}),(0,s.jsx)(a,{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@Component({\r\n    ...\r\n    template: `{{ username | lowercase }}`\r\n})\r\nclass AppComponent {\r\n    username = 'ANGULAR DEV';\r\n}\n"})})}),(0,s.jsxs)(n.p,{children:["Aqu\xed, ",(0,s.jsx)(n.code,{children:"{{ username | lowercase }}"})," convierte el valor de ",(0,s.jsx)(n.code,{children:"username"})," a min\xfasculas, y el resultado en la plantilla ser\xe1: ",(0,s.jsx)(n.strong,{children:'"angular dev"'}),"."]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["Los pipes son herramientas vers\xe1tiles que permiten manipular datos directamente en la plantilla de manera sencilla. Adem\xe1s de los pipes integrados como ",(0,s.jsx)(n.code,{children:"uppercase"})," y ",(0,s.jsx)(n.code,{children:"lowercase"}),", Angular permite configurar par\xe1metros en algunos pipes y crear pipes personalizados para transformar datos de acuerdo con necesidades espec\xedficas."]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>l});var s=a(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);