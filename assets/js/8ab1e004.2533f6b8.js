"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[6470],{4366:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>t});var i=a(4848),c=a(8453);const r={sidebar_position:19},s=void 0,o={id:"Frameworks/Angular/Inyecci\xf3n de dependencias/Inserci\xf3n de dependencias basada en inyecci\xf3n",title:"Inserci\xf3n de dependencias basada en inyecci\xf3n",description:'En Angular, la Inyecci\xf3n de Dependencias (DI) es una t\xe9cnica que permite a los componentes y servicios compartir datos y funcionalidades sin necesidad de instanciarlos manualmente. Esto se logra creando servicios que luego se pueden "inyectar" en otros componentes, lo cual fomenta el desacoplamiento del c\xf3digo y facilita su mantenimiento y escalabilidad.',source:"@site/docs/Frameworks/Angular/Inyecci\xf3n de dependencias/Inserci\xf3n de dependencias basada en inyecci\xf3n.md",sourceDirName:"Frameworks/Angular/Inyecci\xf3n de dependencias",slug:"/Frameworks/Angular/Inyecci\xf3n de dependencias/Inserci\xf3n de dependencias basada en inyecci\xf3n",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Inyecci\xf3n de dependencias/Inserci\xf3n de dependencias basada en inyecci\xf3n",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Frameworks/Angular/Inyecci\xf3n de dependencias/Inserci\xf3n de dependencias basada en inyecci\xf3n.md",tags:[],version:"current",lastUpdatedBy:"SanRM",lastUpdatedAt:1730660085e3,sidebarPosition:19,frontMatter:{sidebar_position:19},sidebar:"tutorialSidebar",previous:{title:"Creaci\xf3n de un servicio inyectable",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Inyecci\xf3n de dependencias/Creaci\xf3n de un servicio inyectable"},next:{title:"Inyecci\xf3n de dependencias basada en contructor",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Inyecci\xf3n de dependencias/Inyecci\xf3n de dependencias basada en contructor"}},d={},t=[{value:"Creaci\xf3n de un Servicio Inyectable",id:"creaci\xf3n-de-un-servicio-inyectable",level:3},{value:"Inyecci\xf3n de un Servicio en un Componente",id:"inyecci\xf3n-de-un-servicio-en-un-componente",level:3},{value:"Paso 1: Inyectar el Servicio <code>CarService</code> en el Componente",id:"paso-1-inyectar-el-servicio-carservice-en-el-componente",level:3},{value:"Paso 2: Uso de la Instancia <code>carService</code>",id:"paso-2-uso-de-la-instancia-carservice",level:3},{value:"Paso 3: Actualizar la Plantilla para Mostrar el Resultado",id:"paso-3-actualizar-la-plantilla-para-mostrar-el-resultado",level:3}];function l(e){const n={blockquote:"blockquote",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components},{Card:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["En Angular, la ",(0,i.jsx)(n.strong,{children:"Inyecci\xf3n de Dependencias (DI)"}),' es una t\xe9cnica que permite a los componentes y servicios compartir datos y funcionalidades sin necesidad de instanciarlos manualmente. Esto se logra creando servicios que luego se pueden "inyectar" en otros componentes, lo cual fomenta el ',(0,i.jsx)(n.strong,{children:"desacoplamiento"})," del c\xf3digo y facilita su mantenimiento y escalabilidad."]}),"\n",(0,i.jsxs)(a,{children:[(0,i.jsx)(n.h3,{id:"creaci\xf3n-de-un-servicio-inyectable",children:"Creaci\xf3n de un Servicio Inyectable"}),(0,i.jsx)(n.p,{children:"El primer paso en el sistema de DI de Angular es crear un servicio inyectable. Este servicio se define como una clase que puede proporcionar datos o funcionalidades a otros componentes. Una vez creado, el servicio se puede inyectar en componentes que lo necesiten."})]}),"\n",(0,i.jsxs)(a,{children:[(0,i.jsx)(n.h3,{id:"inyecci\xf3n-de-un-servicio-en-un-componente",children:"Inyecci\xf3n de un Servicio en un Componente"}),(0,i.jsxs)(n.p,{children:["Para ilustrar el proceso de inyecci\xf3n de dependencias, usaremos un ejemplo pr\xe1ctico donde se inyecta un servicio en un componente usando la funci\xf3n ",(0,i.jsx)(n.code,{children:"inject()"}),". La funci\xf3n ",(0,i.jsx)(n.code,{children:"inject()"})," se utiliza para obtener una instancia de un servicio en un contexto espec\xedfico (como un componente)."]}),(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Nota: Este ejemplo asume que el servicio ",(0,i.jsx)(n.code,{children:"CarService"})," ya est\xe1 creado y configurado en Angular."]}),"\n"]})]}),"\n",(0,i.jsxs)(a,{children:[(0,i.jsxs)(n.h3,{id:"paso-1-inyectar-el-servicio-carservice-en-el-componente",children:["Paso 1: Inyectar el Servicio ",(0,i.jsx)(n.code,{children:"CarService"})," en el Componente"]}),(0,i.jsxs)(n.p,{children:["Primero, inyectemos el servicio ",(0,i.jsx)(n.code,{children:"CarService"})," en el componente ",(0,i.jsx)(n.code,{children:"AppComponent"}),". Usaremos la funci\xf3n ",(0,i.jsx)(n.code,{children:"inject()"})," y asignaremos el servicio a una propiedad de clase para poder usarlo en la l\xf3gica del componente."]}),(0,i.jsx)(a,{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Component, inject } from '@angular/core';\r\nimport { CarService } from './car.service';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n  template: `<p>Car Listing: {{ display }}</p>`,\r\n})\r\nexport class AppComponent {\r\n    // Inyecta el servicio CarService y lo asigna a la propiedad carService\r\n  carService = inject(CarService);\r\n\r\n  display: string;\r\n\r\n  constructor() {\r\n      // Llama a un m\xe9todo del servicio inyectado y lo usa en la clase del componente\r\n    this.display = this.carService.getCars().join(' \u2b50\ufe0f ');\r\n  }\r\n}\n"})})}),(0,i.jsx)(n.p,{children:"En el c\xf3digo anterior:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Usamos ",(0,i.jsx)(n.code,{children:"inject(CarService)"})," para obtener una instancia de ",(0,i.jsx)(n.code,{children:"CarService"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Asignamos esta instancia a la propiedad ",(0,i.jsx)(n.code,{children:"carService"}),", que permite que el servicio est\xe9 disponible en toda la clase del componente ",(0,i.jsx)(n.code,{children:"AppComponent"}),"."]}),"\n"]})]}),"\n",(0,i.jsxs)(a,{children:[(0,i.jsxs)(n.h3,{id:"paso-2-uso-de-la-instancia-carservice",children:["Paso 2: Uso de la Instancia ",(0,i.jsx)(n.code,{children:"carService"})]}),(0,i.jsxs)(n.p,{children:["Una vez inyectado el servicio, podemos acceder a sus m\xe9todos y propiedades. En este ejemplo, dentro del constructor de ",(0,i.jsx)(n.code,{children:"AppComponent"}),", llamamos al m\xe9todo ",(0,i.jsx)(n.code,{children:"getCars()"})," de ",(0,i.jsx)(n.code,{children:"carService"}),", que devuelve una lista de autos. Luego, esta lista se convierte en una cadena de texto con un separador especial y se almacena en la propiedad ",(0,i.jsx)(n.code,{children:"display"}),"."]}),(0,i.jsx)(a,{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"constructor() {\r\n    this.display = this.carService.getCars().join(' \u2b50\ufe0f ');\r\n}\n"})})})]}),"\n",(0,i.jsxs)(a,{children:[(0,i.jsx)(n.h3,{id:"paso-3-actualizar-la-plantilla-para-mostrar-el-resultado",children:"Paso 3: Actualizar la Plantilla para Mostrar el Resultado"}),(0,i.jsxs)(n.p,{children:["Finalmente, actualicemos la plantilla del componente para mostrar el resultado. Usaremos la interpolaci\xf3n ",(0,i.jsx)(n.code,{children:"{{ display }}"})," para mostrar el valor de ",(0,i.jsx)(n.code,{children:"display"})," en el HTML."]}),(0,i.jsx)(a,{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Component({\r\n    selector: 'app-root',\r\n  template: `<p>Car Listing: {{ display }}</p>`,\r\n})\n"})})}),(0,i.jsxs)(n.p,{children:['Este c\xf3digo genera en la vista un listado de autos separados por "\u2b50\ufe0f", por ejemplo: ',(0,i.jsx)(n.strong,{children:'"Toyota \u2b50\ufe0f Honda \u2b50\ufe0f Ford"'}),"."]})]}),"\n",(0,i.jsx)(n.p,{children:"Acabas de inyectar y utilizar tu primer servicio en Angular. Esta t\xe9cnica es fundamental en el desarrollo con Angular, ya que permite que los componentes accedan a funcionalidades comunes o datos compartidos sin tener que instanciarlos manualmente. Esto fomenta un c\xf3digo modular, reutilizable y m\xe1s f\xe1cil de mantener."})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var i=a(6540);const c={},r=i.createContext(c);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);