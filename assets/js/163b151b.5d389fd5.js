"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[6],{7113:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=r(4848),o=r(8453);const s={title:"Provider"},t=void 0,i={id:"Lenguajes de programaci\xf3n/Dart/Flutter/Gesti\xf3n de estados/Provider",title:"Provider",description:"Definici\xf3n",source:"@site/docs/Lenguajes de programaci\xf3n/Dart/Flutter/Gesti\xf3n de estados/Provider.md",sourceDirName:"Lenguajes de programaci\xf3n/Dart/Flutter/Gesti\xf3n de estados",slug:"/Lenguajes de programaci\xf3n/Dart/Flutter/Gesti\xf3n de estados/Provider",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Dart/Flutter/Gesti\xf3n de estados/Provider",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Lenguajes de programaci\xf3n/Dart/Flutter/Gesti\xf3n de estados/Provider.md",tags:[],version:"current",frontMatter:{title:"Provider"},sidebar:"tutorialSidebar",previous:{title:"BLOC",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Dart/Flutter/Gesti\xf3n de estados/BLOC"},next:{title:"Gen\xe9ricos",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Dart/Gen\xe9ricos"}},d={},l=[{value:"Definici\xf3n",id:"definici\xf3n",level:2},{value:"Usando un \xfanico provider",id:"usando-un-\xfanico-provider",level:2},{value:"Definir una clase para manejar el estado",id:"definir-una-clase-para-manejar-el-estado",level:3},{value:"Proporcionar la clase de estado a los widgets",id:"proporcionar-la-clase-de-estado-a-los-widgets",level:3},{value:"Consumir el estado en los widgets",id:"consumir-el-estado-en-los-widgets",level:3},{value:"Usando m\xfaltiples providers",id:"usando-m\xfaltiples-providers",level:2},{value:"Definir m\xfaltiples clases para manejar el estado",id:"definir-m\xfaltiples-clases-para-manejar-el-estado",level:3},{value:"Proporcionar las clases de estado a los widgets",id:"proporcionar-las-clases-de-estado-a-los-widgets",level:3}];function c(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components},{Card:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"definici\xf3n",children:"Definici\xf3n"}),"\n",(0,a.jsx)(n.p,{children:"Un Provider es un patr\xf3n de gesti\xf3n de estado que permite compartir datos entre widgets de manera eficiente y sin acoplamiento directo, se puede pensar en \xe9l como un contenedor de datos que puede ser accedido por cualquier widget en el \xe1rbol de widgets."}),"\n",(0,a.jsx)(n.p,{children:"En esta p\xe1gina se explica c\xf3mo usar uno o varios providers para administrar el estado de una aplicaci\xf3n de Flutter y c\xf3mo se pueden usar para compartir datos entre widgets."}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)(n.h2,{id:"usando-un-\xfanico-provider",children:"Usando un \xfanico provider"}),(0,a.jsxs)(r,{children:[(0,a.jsx)(n.h3,{id:"definir-una-clase-para-manejar-el-estado",children:"Definir una clase para manejar el estado"}),(0,a.jsx)(n.p,{children:"Primero, necesitamos una clase que maneje nuestro estado."}),(0,a.jsx)(n.p,{children:"Esta clase debe extender ChangeNotifier, que es una clase simple incluida en el paquete Flutter que proporciona notificaciones de cambio a sus oyentes."}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class Counter extends ChangeNotifier {\r\n    int _count = 0;\r\n\r\n    int get count => _count;\r\n\r\n    void increment() {\r\n    _count++;\r\n    notifyListeners();\r\n    }\r\n}\n"})}),(0,a.jsx)(n.p,{children:"En este caso, nuestro estado es simplemente un contador."}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Tenemos un m\xe9todo increment que incrementa el contador y luego llama a notifyListeners para indicar a todos los oyentes que el estado ha cambiado."}),"\n"]})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)(n.h3,{id:"proporcionar-la-clase-de-estado-a-los-widgets",children:"Proporcionar la clase de estado a los widgets"}),(0,a.jsx)(n.p,{children:"Ahora necesitamos proporcionar esta clase a nuestros widgets."}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Para hacer esto, envolvemos nuestra aplicaci\xf3n en un ChangeNotifierProvider y pasamos una instancia de nuestra clase counter al atributo create de la clase ChangeNotifierProvider."}),"\n"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"   void main() {\r\n      runApp(\r\n        ChangeNotifierProvider(\r\n          create: (context) => Counter(),\r\n          child: MyApp(),\r\n        ),\r\n      );\r\n    }\n"})}),(0,a.jsx)(n.p,{children:"El ChangeNotifierProvider toma un create que es una funci\xf3n que crea una instancia de nuestro ChangeNotifier. En este caso, simplemente estamos creando una nueva instancia de Counter."})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)(n.h3,{id:"consumir-el-estado-en-los-widgets",children:"Consumir el estado en los widgets"}),(0,a.jsx)(n.p,{children:"Finalmente necesitamos consumir nuestro estado en nuestros widgets, para hacer esto, usamos el widget Consumer."}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class MyApp extends StatelessWidget {\r\n\r\n    @override\r\n    Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n        home: Scaffold(\r\n        appBar: AppBar(title: Text('Ejemplo de provider')),\r\n        body: Center(\r\n            child: Consumer<Counter>(\r\n            builder: (context, counter, child) => Text('${counter.count}'),\r\n            ),\r\n        ),\r\n        floatingActionButton: FloatingActionButton(\r\n            onPressed: () {\r\n            context.read<Counter>().increment();\r\n            },\r\n            child: Icon(Icons.add),\r\n        ),\r\n        ),\r\n    );\r\n    }\r\n\r\n}\n"})}),(0,a.jsx)(n.p,{children:"El Consumer toma un builder que es una funci\xf3n que se llama cada vez que cambia nuestro ChangeNotifier."}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"En este caso estamos simplemente mostrando el valor de nuestro contador en un widget Text."}),"\n"]})]})]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)(n.h2,{id:"usando-m\xfaltiples-providers",children:"Usando m\xfaltiples providers"}),(0,a.jsx)(n.h3,{id:"definir-m\xfaltiples-clases-para-manejar-el-estado",children:"Definir m\xfaltiples clases para manejar el estado"}),(0,a.jsx)(n.p,{children:"Primero, necesitamos clases que manejen nuestro estado."}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Cada una de estas clases debe extender ChangeNotifier, que es una clase simple incluida en el paquete Flutter que proporciona notificaciones de cambio a sus oyentes."}),"\n"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class Counter extends ChangeNotifier {\r\n    int _count = 0;\r\n\r\n    int get count => _count;\r\n\r\n    void increment() {\r\n    _count++;\r\n    notifyListeners();\r\n    }\r\n}\r\n\r\nclass TextColor extends ChangeNotifier {\r\n    Color _color = Colors.black;\r\n\r\n    Color get color => _color;\r\n\r\n    void changeColor() {\r\n    _color = _color == Colors.black ? Colors.red : Colors.black;\r\n    notifyListeners();\r\n    }\r\n}\n"})}),(0,a.jsx)(n.p,{children:"En este caso nuestro estado consiste en un contador y un color de texto."}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Tenemos m\xe9todos increment y changeColor que modifican el estado y luego llaman a notifyListeners para indicar a todos los oyentes que el estado ha cambiado."}),"\n"]})]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)(n.h3,{id:"proporcionar-las-clases-de-estado-a-los-widgets",children:"Proporcionar las clases de estado a los widgets"}),(0,a.jsx)(n.p,{children:"Ahora necesitamos proporcionar estas clases a nuestros widgets."}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Para hacer esto, envolvemos nuestra aplicaci\xf3n en un MultiProvider y pasamos una lista de ChangeNotifierProvider que crean instancias de nuestras clases de estado."}),"\n"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"void main() {\r\n    runApp(\r\n        MultiProvider(\r\n            providers: [\r\n            ChangeNotifierProvider(create: (context) => Counter()),\r\n            ChangeNotifierProvider(create: (context) => TextColor()),\r\n            ],\r\n            child: MyApp(),\r\n        ),\r\n    );\r\n}\n"})}),(0,a.jsx)(n.p,{children:"El MultiProvider toma una lista de providers que crean instancias de nuestros ChangeNotifier."}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"En este caso estamos creando nuevas instancias de Counter y TextColor."}),"\n"]})]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)(n.p,{children:"Finalmente necesitamos consumir nuestro estado en nuestros widgets. Para hacer esto, usamos el widget Consumer2."}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class MyApp extends StatelessWidget {\r\n    @override\r\n    Widget build(BuildContext context) {\r\n        return MaterialApp(\r\n            home: Scaffold(\r\n                appBar: AppBar(title: Text('MultiProvider Example')),\r\n                body: Center(\r\n                    child: Consumer2<Counter, TextColor>(\r\n                    builder: (context, counter, textColor, child) => Text(\r\n                        '${counter.count}',\r\n                        style: TextStyle(color: textColor.color),\r\n                    ),\r\n                    ),\r\n                ),\r\n                floatingActionButton: FloatingActionButton(\r\n                    onPressed: () {\r\n                    context.read<Counter>().increment();\r\n                    context.read<TextColor>().changeColor();\r\n                    },\r\n                    child: Icon(Icons.add),\r\n                ),\r\n            ),\r\n        );\r\n    }\r\n}\n"})}),(0,a.jsx)(n.p,{children:"El Consumer2 toma un builder que es una funci\xf3n que se llama cada vez que cambian nuestros ChangeNotifier."}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"En este caso estamos mostrando el valor de nuestro contador en un widget Text y cambiando el color del texto cada vez que se presiona el bot\xf3n flotante."}),"\n"]})]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>i});var a=r(6540);const o={},s=a.createContext(o);function t(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);