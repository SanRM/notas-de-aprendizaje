"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[4637],{7457:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>t,metadata:()=>c,toc:()=>l});var i=a(4848),r=a(8453);const t={},s=void 0,c={id:"Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Usuario y contrase\xf1a/Usuario y contrase\xf1a",title:"Usuario y contrase\xf1a",description:"Autenticaci\xf3n con Nombre de Usuario y Contrase\xf1a en Spring Security",source:"@site/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Usuario y contrase\xf1a/Usuario y contrase\xf1a.md",sourceDirName:"Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Usuario y contrase\xf1a",slug:"/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Usuario y contrase\xf1a/",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Usuario y contrase\xf1a/",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Usuario y contrase\xf1a/Usuario y contrase\xf1a.md",tags:[],version:"current",lastUpdatedBy:"SanRM",lastUpdatedAt:1730660085e3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AbstractAuthenticationProcessingFilter",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/AbstractAuthenticationProcessingFilter"},next:{title:"Metodolog\xedas de desarrollo de software",permalink:"/notas-de-aprendizaje/docs/category/metodolog\xedas-de-desarrollo-de-software"}},o={},l=[{value:"Autenticaci\xf3n con Nombre de Usuario y Contrase\xf1a en Spring Security",id:"autenticaci\xf3n-con-nombre-de-usuario-y-contrase\xf1a-en-spring-security",level:3},{value:"Configuraci\xf3n B\xe1sica de Autenticaci\xf3n con Usuario y Contrase\xf1a",id:"configuraci\xf3n-b\xe1sica-de-autenticaci\xf3n-con-usuario-y-contrase\xf1a",level:3},{value:"Desglose de la Configuraci\xf3n",id:"desglose-de-la-configuraci\xf3n",level:4},{value:"\xbfQu\xe9 es el AuthenticationManager?",id:"qu\xe9-es-el-authenticationmanager",level:3},{value:"Publicar un bean de AuthenticationManager",id:"publicar-un-bean-de-authenticationmanager",level:3},{value:"Configuraci\xf3n para Publicar el AuthenticationManager",id:"configuraci\xf3n-para-publicar-el-authenticationmanager",level:4},{value:"Explicaci\xf3n Detallada",id:"explicaci\xf3n-detallada",level:4},{value:"Uso del AuthenticationManager en un RestController",id:"uso-del-authenticationmanager-en-un-restcontroller",level:3},{value:"Explicaci\xf3n Detallada",id:"explicaci\xf3n-detallada-1",level:4},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:3}];function u(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Card:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"autenticaci\xf3n-con-nombre-de-usuario-y-contrase\xf1a-en-spring-security",children:"Autenticaci\xf3n con Nombre de Usuario y Contrase\xf1a en Spring Security"}),"\n",(0,i.jsxs)(n.p,{children:["Autenticar a un usuario validando su nombre de usuario y contrase\xf1a es uno de los m\xe9todos m\xe1s comunes para asegurar aplicaciones web. ",(0,i.jsx)(n.strong,{children:"Spring Security"})," proporciona un soporte completo para este tipo de autenticaci\xf3n. Ahora, vamos a ver c\xf3mo configurarlo y c\xf3mo funciona."]}),"\n",(0,i.jsxs)(a,{children:[(0,i.jsx)(n.h3,{id:"configuraci\xf3n-b\xe1sica-de-autenticaci\xf3n-con-usuario-y-contrase\xf1a",children:"Configuraci\xf3n B\xe1sica de Autenticaci\xf3n con Usuario y Contrase\xf1a"}),(0,i.jsx)(n.p,{children:"Aqu\xed te muestro un ejemplo b\xe1sico de c\xf3mo configurar la autenticaci\xf3n utilizando un nombre de usuario y contrase\xf1a en una aplicaci\xf3n Java con Spring Security:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n\t@Bean\r\n\tpublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n\t\thttp\r\n\t\t\t.authorizeHttpRequests((authorize) -> authorize\r\n\t\t\t\t.anyRequest().authenticated() // Cualquier solicitud debe estar autenticada\r\n\t\t\t)\r\n\t\t\t.httpBasic(Customizer.withDefaults()) // Habilita la autenticaci\xf3n HTTP Basic\r\n\t\t\t.formLogin(Customizer.withDefaults()); // Habilita la autenticaci\xf3n con formulario de inicio de sesi\xf3n\r\n\r\n\t\treturn http.build(); // Devuelve la configuraci\xf3n de la cadena de seguridad\r\n\t}\r\n\r\n\t@Bean\r\n\tpublic UserDetailsService userDetailsService() {\r\n\t\tUserDetails userDetails = User.withDefaultPasswordEncoder() // Crea un usuario con contrase\xf1a codificada\r\n\t\t\t.username("user") // Nombre de usuario\r\n\t\t\t.password("password") // Contrase\xf1a\r\n\t\t\t.roles("USER") // Asigna el rol de usuario\r\n\t\t\t.build(); // Construye el objeto UserDetails\r\n\r\n\t\treturn new InMemoryUserDetailsManager(userDetails); // Usa una base de datos de usuarios en memoria\r\n\t}\r\n\r\n}\n'})}),(0,i.jsxs)(a,{children:[(0,i.jsx)(n.h4,{id:"desglose-de-la-configuraci\xf3n",children:"Desglose de la Configuraci\xf3n"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Anotaciones:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"@Configuration"}),": Indica que esta clase contiene la configuraci\xf3n de la aplicaci\xf3n."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"@EnableWebSecurity"}),": Habilita la seguridad web con Spring Security."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"SecurityFilterChain"})}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Esta clase define la ",(0,i.jsx)(n.strong,{children:"Cadena de Filtros de Seguridad"})," (SecurityFilterChain) que se encarga de manejar las solicitudes HTTP."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"http.authorizeHttpRequests()"})}),": Configura las reglas de autorizaci\xf3n. En este caso, cualquier solicitud debe estar autenticada (",(0,i.jsx)(n.code,{children:"anyRequest().authenticated()"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"httpBasic()"})}),": Habilita la autenticaci\xf3n b\xe1sica HTTP."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"formLogin()"})}),": Habilita el inicio de sesi\xf3n a trav\xe9s de un formulario (una p\xe1gina donde el usuario puede ingresar sus credenciales)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"UserDetailsService"})}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"UserDetails"}),": Es una interfaz de Spring Security que contiene la informaci\xf3n b\xe1sica del usuario, como nombre de usuario, contrase\xf1a y roles."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"User.withDefaultPasswordEncoder()"})}),": Crea un usuario con una contrase\xf1a codificada usando un codificador de contrase\xf1as b\xe1sico (este enfoque solo es adecuado para pruebas)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"new InMemoryUserDetailsManager()"})}),": Es una implementaci\xf3n que guarda los usuarios en la memoria. Es decir, los usuarios no se almacenan en una base de datos externa, sino en la memoria de la aplicaci\xf3n, lo cual es \xfatil para entornos de prueba o aplicaciones peque\xf1as."]}),"\n"]}),"\n"]}),"\n"]})]})]}),"\n",(0,i.jsxs)(a,{children:[(0,i.jsx)(n.h3,{id:"qu\xe9-es-el-authenticationmanager",children:"\xbfQu\xe9 es el AuthenticationManager?"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Presiona ac\xe1 para ir a la explicaci\xf3n detallada de ",(0,i.jsx)(n.a,{href:"/notas-de-aprendizaje/docs/Lenguajes%20de%20programaci%C3%B3n/Java/Spring/Spring%20Security/Autenticaci%C3%B3n/Arquitectura%20de%20la%20autenticaci%C3%B3n/AuthenticationManager",children:"AuthenticationManager"}),"."]}),"\n"]}),(0,i.jsxs)(n.p,{children:["En resumen, el ",(0,i.jsx)(n.strong,{children:"AuthenticationManager"})," es un componente fundamental en Spring Security que maneja el proceso de autenticaci\xf3n. Este se encarga de validar las credenciales (como el nombre de usuario y la contrase\xf1a) y devolver una instancia de ",(0,i.jsx)(n.strong,{children:"Authentication"})," si la autenticaci\xf3n es exitosa. Si falla, lanzar\xe1 una excepci\xf3n. Normalmente, este proceso est\xe1 oculto cuando usas configuraciones predeterminadas como el inicio de sesi\xf3n con formularios, pero cuando necesitas una autenticaci\xf3n personalizada (como un API REST), puedes crear tu propio ",(0,i.jsx)(n.code,{children:"AuthenticationManager"}),"."]}),(0,i.jsx)(n.h3,{id:"publicar-un-bean-de-authenticationmanager",children:"Publicar un bean de AuthenticationManager"}),(0,i.jsxs)(n.p,{children:["A veces es necesario exponer o ",(0,i.jsxs)(n.strong,{children:["publicar un bean de ",(0,i.jsx)(n.code,{children:"AuthenticationManager"})]})," para utilizarlo en otros componentes de tu aplicaci\xf3n, como un servicio (",(0,i.jsx)(n.code,{children:"@Service"}),") o un controlador (",(0,i.jsx)(n.code,{children:"@RestController"}),"), en casos donde quieres manejar manualmente la autenticaci\xf3n (por ejemplo, autenticando usuarios a trav\xe9s de un API en lugar de usar un formulario HTML)."]}),(0,i.jsx)(n.h4,{id:"configuraci\xf3n-para-publicar-el-authenticationmanager",children:"Configuraci\xf3n para Publicar el AuthenticationManager"}),(0,i.jsxs)(n.p,{children:["Aqu\xed te muestro c\xf3mo publicar un ",(0,i.jsx)(n.code,{children:"AuthenticationManager"})," usando una clase de configuraci\xf3n en Spring Security."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n\t@Bean\r\n\tpublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n\t\thttp\r\n\t\t\t.authorizeHttpRequests((authorize) -> authorize\r\n\t\t\t\t.requestMatchers("/login").permitAll()  // Permitir acceso a la URL /login sin autenticaci\xf3n\r\n\t\t\t\t.anyRequest().authenticated()           // Requerir autenticaci\xf3n para cualquier otra URL\r\n\t\t\t);\r\n\r\n\t\treturn http.build();  // Devuelve la cadena de filtros de seguridad configurada\r\n\t}\r\n\r\n\t@Bean\r\n\tpublic AuthenticationManager authenticationManager(\r\n\t\t\tUserDetailsService userDetailsService,\r\n\t\t\tPasswordEncoder passwordEncoder) {\r\n\t\t// Crear un proveedor de autenticaci\xf3n basado en DAO (Data Access Object)\r\n\t\tDaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();\r\n\t\tauthenticationProvider.setUserDetailsService(userDetailsService);  // Establece el servicio de usuarios\r\n\t\tauthenticationProvider.setPasswordEncoder(passwordEncoder);        // Establece el codificador de contrase\xf1as\r\n\r\n\t\t// Devuelve un AuthenticationManager que gestiona autenticaci\xf3n usando ese proveedor\r\n\t\treturn new ProviderManager(authenticationProvider);\r\n\t}\r\n\r\n\t@Bean\r\n\tpublic UserDetailsService userDetailsService() {\r\n\t\t// Crear un usuario en memoria con nombre de usuario y contrase\xf1a predeterminados\r\n\t\tUserDetails userDetails = User.withDefaultPasswordEncoder()\r\n\t\t\t.username("user")\r\n\t\t\t.password("password")\r\n\t\t\t.roles("USER")\r\n\t\t\t.build();\r\n\r\n\t\t// Devuelve un servicio de gesti\xf3n de usuarios en memoria\r\n\t\treturn new InMemoryUserDetailsManager(userDetails);\r\n\t}\r\n\r\n\t@Bean\r\n\tpublic PasswordEncoder passwordEncoder() {\r\n\t\t// Devuelve un codificador de contrase\xf1as que puede delegar entre diferentes estrategias\r\n\t\treturn PasswordEncoderFactories.createDelegatingPasswordEncoder();\r\n\t}\r\n\r\n}\n'})}),(0,i.jsx)(n.h4,{id:"explicaci\xf3n-detallada",children:"Explicaci\xf3n Detallada"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Clase de Configuraci\xf3n"})," (",(0,i.jsx)(n.code,{children:"@Configuration"}),") y Habilitaci\xf3n de Seguridad Web (",(0,i.jsx)(n.code,{children:"@EnableWebSecurity"}),"):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Define una clase de configuraci\xf3n que ser\xe1 gestionada por Spring y habilita la seguridad web."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cadena de Filtros de Seguridad"})," (",(0,i.jsx)(n.code,{children:"securityFilterChain"}),"):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Configura los filtros de seguridad, permitiendo que la URL ",(0,i.jsx)(n.code,{children:"/login"})," sea accesible para todos sin autenticaci\xf3n (",(0,i.jsx)(n.code,{children:"permitAll()"}),"), mientras que cualquier otra solicitud necesita autenticaci\xf3n (",(0,i.jsx)(n.code,{children:"anyRequest().authenticated()"}),")."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Bean de ",(0,i.jsx)(n.code,{children:"AuthenticationManager"})]}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Este m\xe9todo publica un bean de ",(0,i.jsx)(n.code,{children:"AuthenticationManager"})," que se puede usar en otros componentes."]}),"\n",(0,i.jsxs)(n.li,{children:["Usa un ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"DaoAuthenticationProvider"})}),", que es un proveedor que se encarga de autenticar usuarios bas\xe1ndose en los detalles del usuario (nombre de usuario, contrase\xf1a) que se cargan desde un ",(0,i.jsx)(n.code,{children:"UserDetailsService"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"UserDetailsService"})," y ",(0,i.jsx)(n.code,{children:"PasswordEncoder"})," son inyectados en el ",(0,i.jsx)(n.code,{children:"DaoAuthenticationProvider"}),". El ",(0,i.jsx)(n.code,{children:"UserDetailsService"})," gestiona los detalles de los usuarios y el ",(0,i.jsx)(n.code,{children:"PasswordEncoder"})," se usa para verificar las contrase\xf1as de manera segura."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Bean de ",(0,i.jsx)(n.code,{children:"UserDetailsService"})]}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Se define un usuario en memoria (",(0,i.jsx)(n.code,{children:"InMemoryUserDetailsManager"}),') con nombre de usuario "user" y contrase\xf1a "password". Esto se usa para realizar pruebas de autenticaci\xf3n.']}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Bean de ",(0,i.jsx)(n.code,{children:"PasswordEncoder"})]}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Un codificador de contrase\xf1as que permite delegar diferentes estrategias de codificaci\xf3n (esto es importante para manejar la seguridad de las contrase\xf1as de forma adecuada)."}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(n.h3,{id:"uso-del-authenticationmanager-en-un-restcontroller",children:"Uso del AuthenticationManager en un RestController"}),(0,i.jsxs)(n.p,{children:["Una vez que has configurado y publicado el ",(0,i.jsx)(n.code,{children:"AuthenticationManager"}),", puedes utilizarlo en un ",(0,i.jsx)(n.strong,{children:"RestController"})," para autenticar usuarios a trav\xe9s de una API REST. Aqu\xed te muestro c\xf3mo hacerlo:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@RestController\r\npublic class LoginController {\r\n\r\n\tprivate final AuthenticationManager authenticationManager;\r\n\r\n\t// El AuthenticationManager es inyectado en el controlador\r\n\tpublic LoginController(AuthenticationManager authenticationManager) {\r\n\t\tthis.authenticationManager = authenticationManager;\r\n\t}\r\n\r\n\t@PostMapping("/login")\r\n\tpublic ResponseEntity<Void> login(@RequestBody LoginRequest loginRequest) {\r\n\t\t// Crea un token de autenticaci\xf3n con el nombre de usuario y contrase\xf1a proporcionados\r\n\t\tAuthentication authenticationRequest =\r\n\t\t\tUsernamePasswordAuthenticationToken.unauthenticated(\r\n\t\t\t\tloginRequest.username(), loginRequest.password());\r\n\t\t\r\n\t\t// Realiza la autenticaci\xf3n usando el AuthenticationManager\r\n\t\tAuthentication authenticationResponse =\r\n\t\t\tthis.authenticationManager.authenticate(authenticationRequest);\r\n\t\t\r\n\t\t// Aqu\xed deber\xedas guardar el usuario autenticado en el SecurityContext si es necesario\r\n\t\t// ...\r\n\r\n\t\t// Retorna una respuesta vac\xeda con estado 200 OK si la autenticaci\xf3n es exitosa\r\n\t\treturn ResponseEntity.ok().build();\r\n\t}\r\n\r\n\t// Clase que representa la solicitud de inicio de sesi\xf3n\r\n\tpublic record LoginRequest(String username, String password) {\r\n\t}\r\n\r\n}\n'})}),(0,i.jsx)(n.h4,{id:"explicaci\xf3n-detallada-1",children:"Explicaci\xf3n Detallada"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Inyecci\xf3n del ",(0,i.jsx)(n.code,{children:"AuthenticationManager"})]}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["El ",(0,i.jsx)(n.code,{children:"AuthenticationManager"})," se inyecta en el ",(0,i.jsx)(n.code,{children:"LoginController"})," a trav\xe9s del constructor. Esto permite que el controlador REST use este componente para autenticar las solicitudes."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["M\xe9todo ",(0,i.jsx)(n.code,{children:"login"})]}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Este m\xe9todo maneja las solicitudes de inicio de sesi\xf3n en la URL ",(0,i.jsx)(n.code,{children:"/login"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Se crea un token de autenticaci\xf3n sin autenticaci\xf3n (",(0,i.jsx)(n.code,{children:"unauthenticated"}),") usando el nombre de usuario y la contrase\xf1a proporcionados por el cliente (que est\xe1n en el cuerpo de la solicitud ",(0,i.jsx)(n.code,{children:"@RequestBody"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["Luego, el token se pasa al ",(0,i.jsx)(n.code,{children:"AuthenticationManager"}),", que intenta autenticar al usuario. Si las credenciales son correctas, el usuario es autenticado."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Guardar al Usuario Autenticado"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Si es necesario, puedes guardar el usuario autenticado en el ",(0,i.jsx)(n.strong,{children:"SecurityContextRepository"}),". Si usas sesiones HTTP, puedes utilizar un ",(0,i.jsx)(n.code,{children:"HttpSessionSecurityContextRepository"})," para almacenar el contexto de seguridad entre diferentes solicitudes."]}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(n.h3,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),(0,i.jsxs)(n.p,{children:["Publicar un ",(0,i.jsx)(n.code,{children:"AuthenticationManager"})," en Spring Security te permite tener control total sobre el proceso de autenticaci\xf3n, lo cual es especialmente \xfatil cuando necesitas implementar autenticaci\xf3n personalizada, como en APIs REST. Puedes reutilizar este ",(0,i.jsx)(n.code,{children:"AuthenticationManager"})," en diferentes componentes y adaptarlo a tus necesidades espec\xedficas, como manejar credenciales almacenadas en memoria, bases de datos, o servicios externos."]})]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>c});var i=a(6540);const r={},t=i.createContext(r);function s(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);