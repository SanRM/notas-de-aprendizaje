"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[8710],{5197:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>t});var s=o(4848),r=o(8453);const i={sidebar_position:4},l=void 0,a={id:"Frameworks/Angular/Control de flujo @if",title:"Control de flujo @if",description:"Control de Flujo en Componentes - Uso de @if en Angular",source:"@site/docs/Frameworks/Angular/Control de flujo @if.md",sourceDirName:"Frameworks/Angular",slug:"/Frameworks/Angular/Control de flujo @if",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Control de flujo @if",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Frameworks/Angular/Control de flujo @if.md",tags:[],version:"current",lastUpdatedBy:"SanRM",lastUpdatedAt:1730660085e3,sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Composici\xf3n de componentes",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Composici\xf3n de componentes"},next:{title:"Control de flujo @for",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Control de flujo @for"}},d={},t=[{value:"Control de Flujo en Componentes - Uso de @if en Angular",id:"control-de-flujo-en-componentes---uso-de-if-en-angular",level:3},{value:"Uso B\xe1sico de @if en Plantillas",id:"uso-b\xe1sico-de-if-en-plantillas",level:4},{value:"Ejemplo Completo: Mostrando el Estado del Servidor",id:"ejemplo-completo-mostrando-el-estado-del-servidor",level:4}];function c(e){const n={code:"code",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Card:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"control-de-flujo-en-componentes---uso-de-if-en-angular",children:"Control de Flujo en Componentes - Uso de @if en Angular"}),"\n",(0,s.jsxs)(n.p,{children:["En el desarrollo de aplicaciones, es com\xfan decidir qu\xe9 mostrar al usuario seg\xfan ciertas condiciones. En Angular, podemos realizar estas decisiones de forma program\xe1tica en las plantillas, gracias a la sintaxis de control de flujo condicional ",(0,s.jsx)(n.strong,{children:"@if"}),", introducida en versiones recientes de Angular."]}),"\n",(0,s.jsxs)(n.p,{children:["A continuaci\xf3n, aprenderemos a utilizar la sintaxis de ",(0,s.jsx)(n.strong,{children:"@if"})," para mostrar o ocultar elementos en una plantilla de acuerdo con el valor de una propiedad en la clase del componente."]}),"\n",(0,s.jsxs)(o,{children:[(0,s.jsx)(n.h4,{id:"uso-b\xe1sico-de-if-en-plantillas",children:"Uso B\xe1sico de @if en Plantillas"}),(0,s.jsxs)(n.p,{children:["Angular permite utilizar la sintaxis ",(0,s.jsx)(n.strong,{children:"@if"})," en las plantillas para mostrar contenido condicionalmente. En este ejemplo, crearemos un mensaje que se muestra solo si la variable ",(0,s.jsx)(n.code,{children:"isLoggedIn"})," es verdadera."]}),(0,s.jsx)(o,{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@Component({\r\n    selector: 'app-root',\r\n  template: `\r\n    @if (isLoggedIn) {\r\n      <p>\xa1Bienvenido de nuevo, Amigo!</p>\r\n    }\r\n  `,\r\n})\r\nclass AppComponent {\r\n    isLoggedIn = true;\r\n}\n"})})}),(0,s.jsxs)(n.p,{children:["En este caso, ",(0,s.jsx)(n.code,{children:"isLoggedIn"})," es una propiedad booleana que controla si el mensaje de bienvenida aparece en la interfaz. Si ",(0,s.jsx)(n.code,{children:"isLoggedIn"})," es ",(0,s.jsx)(n.code,{children:"true"}),", el mensaje ",(0,s.jsx)(n.strong,{children:'"\xa1Bienvenido de nuevo, Amigo!"'})," se mostrar\xe1. Si ",(0,s.jsx)(n.code,{children:"isLoggedIn"})," es ",(0,s.jsx)(n.code,{children:"false"}),", el mensaje no aparecer\xe1."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Puntos importantes"}),":"]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["La sintaxis de ",(0,s.jsx)(n.strong,{children:"@if"})," requiere el prefijo ",(0,s.jsx)(n.code,{children:"@"})," para distinguirlo como una parte especial de la sintaxis de plantillas en Angular."]}),"\n",(0,s.jsxs)(n.li,{children:["Si est\xe1s utilizando Angular v16 o versiones anteriores, consulta la documentaci\xf3n de Angular sobre ",(0,s.jsx)(n.code,{children:"NgIf"})," para m\xe1s detalles."]}),"\n"]})]}),"\n",(0,s.jsxs)(o,{children:[(0,s.jsx)(n.h4,{id:"ejemplo-completo-mostrando-el-estado-del-servidor",children:"Ejemplo Completo: Mostrando el Estado del Servidor"}),(0,s.jsxs)(n.p,{children:["Supongamos que queremos mostrar el estado de un servidor en nuestra aplicaci\xf3n. Para esto, agregaremos una propiedad ",(0,s.jsx)(n.code,{children:"isServerRunning"})," y usaremos ",(0,s.jsx)(n.strong,{children:"@if"})," para mostrar un mensaje basado en su valor."]}),(0,s.jsxs)(o,{children:[(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Definir la Propiedad"}),": A\xf1adimos la propiedad ",(0,s.jsx)(n.code,{children:"isServerRunning"})," en la clase del componente y la configuramos como ",(0,s.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),(0,s.jsx)(o,{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"class AppComponent {\r\n    isServerRunning = true;\r\n}\n"})})})]}),(0,s.jsxs)(o,{children:[(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mostrar Mensajes Condicionales con @if y @else"}),": Utilizamos ",(0,s.jsx)(n.strong,{children:"@if"})," y ",(0,s.jsx)(n.strong,{children:"@else"})," en la plantilla para mostrar diferentes mensajes dependiendo del valor de ",(0,s.jsx)(n.code,{children:"isServerRunning"}),"."]}),"\n"]}),(0,s.jsx)(o,{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@Component({\r\n    selector: 'app-root',\r\n  template: `\r\n    @if (isServerRunning) {\r\n      <p>S\xed, el servidor est\xe1 funcionando.</p>\r\n    } @else {\r\n      <p>No, el servidor no est\xe1 funcionando.</p>\r\n    }\r\n  `,\r\n})\r\nclass AppComponent {\r\n    isServerRunning = true;\r\n}\n"})})}),(0,s.jsx)(n.p,{children:"En este caso:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Si ",(0,s.jsx)(n.code,{children:"isServerRunning"})," es ",(0,s.jsx)(n.code,{children:"true"}),", la plantilla muestra ",(0,s.jsx)(n.strong,{children:'"S\xed, el servidor est\xe1 funcionando."'})]}),"\n",(0,s.jsxs)(n.li,{children:["Si ",(0,s.jsx)(n.code,{children:"isServerRunning"})," es ",(0,s.jsx)(n.code,{children:"false"}),", se muestra ",(0,s.jsx)(n.strong,{children:'"No, el servidor no est\xe1 funcionando."'})," gracias al bloque ",(0,s.jsx)(n.code,{children:"@else"}),"."]}),"\n"]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["El uso de ",(0,s.jsx)(n.strong,{children:"@if"})," y ",(0,s.jsx)(n.strong,{children:"@else"})," en Angular facilita el control de flujo condicional en las plantillas, permitiendo mostrar diferentes elementos en la interfaz seg\xfan el estado de las propiedades en la clase del componente. Esto ayuda a crear interfaces m\xe1s din\xe1micas y adaptables, esenciales para mejorar la experiencia del usuario en aplicaciones interactivas."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>a});var s=o(6540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);