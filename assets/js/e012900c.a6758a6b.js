"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[3141],{4999:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>t,metadata:()=>l,toc:()=>s});var r=o(4848),c=o(8453);const t={sidebar_position:9},i=void 0,l={id:"Lenguajes de programaci\xf3n/Angular/Output",title:"Output",description:"@Output es un decorador en Angular que permite que un componente hijo env\xede informaci\xf3n o notificaciones al componente padre. Esto es \xfatil cuando queremos avisar al componente principal de alg\xfan cambio o acci\xf3n que ocurri\xf3 en el componente secundario, como el clic de un bot\xf3n, el env\xedo de un formulario, o cualquier evento relevante.",source:"@site/docs/Lenguajes de programaci\xf3n/Angular/Output.md",sourceDirName:"Lenguajes de programaci\xf3n/Angular",slug:"/Lenguajes de programaci\xf3n/Angular/Output",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Angular/Output",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Lenguajes de programaci\xf3n/Angular/Output.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Input",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Angular/Input"},next:{title:"Vistas diferibles",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Angular/Vistas diferibles"}},a={},s=[{value:"\xbfPara qu\xe9 sirve <code>@Output</code>?",id:"para-qu\xe9-sirve-output",level:3},{value:"Ejemplo Pr\xe1ctico de <code>@Output</code>",id:"ejemplo-pr\xe1ctico-de-output",level:3},{value:"C\xf3digo del Ejemplo",id:"c\xf3digo-del-ejemplo",level:3},{value:"Explicaci\xf3n Paso a Paso",id:"explicaci\xf3n-paso-a-paso",level:3},{value:"\xbfPor qu\xe9 es \xfatil <code>@Output</code>?",id:"por-qu\xe9-es-\xfatil-output",level:3}];function d(e){const n={code:"code",em:"em",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components},{Card:o,TabItem:t,Tabs:i}=n;return o||p("Card",!0),t||p("TabItem",!0),i||p("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@Output"})," es un decorador en Angular que permite que un ",(0,r.jsx)(n.strong,{children:"componente hijo"})," env\xede informaci\xf3n o notificaciones al ",(0,r.jsx)(n.strong,{children:"componente padre"}),". Esto es \xfatil cuando queremos avisar al componente principal de alg\xfan cambio o acci\xf3n que ocurri\xf3 en el componente secundario, como el clic de un bot\xf3n, el env\xedo de un formulario, o cualquier evento relevante."]}),"\n",(0,r.jsxs)(o,{children:[(0,r.jsxs)(n.h3,{id:"para-qu\xe9-sirve-output",children:["\xbfPara qu\xe9 sirve ",(0,r.jsx)(n.code,{children:"@Output"}),"?"]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@Output"})," se usa para ",(0,r.jsx)(n.strong,{children:"crear eventos personalizados"})," en el componente hijo que el componente padre puede escuchar y manejar. Imagina una aplicaci\xf3n en la que el usuario interact\xfaa con varios elementos de la interfaz (botones, listas, formularios) en un componente hijo. El componente padre necesita saber cu\xe1ndo suceden esas interacciones para actualizar su estado o realizar alguna acci\xf3n. Con ",(0,r.jsx)(n.code,{children:"@Output"}),', el hijo puede "hablar" con el padre y enviarle esos datos o notificaciones de manera sencilla.']})]}),"\n",(0,r.jsxs)(o,{children:[(0,r.jsxs)(n.h3,{id:"ejemplo-pr\xe1ctico-de-output",children:["Ejemplo Pr\xe1ctico de ",(0,r.jsx)(n.code,{children:"@Output"})]}),(0,r.jsxs)(n.p,{children:["Para comprenderlo mejor, veamos c\xf3mo funciona ",(0,r.jsx)(n.code,{children:"@Output"})," en un ejemplo concreto. Aqu\xed tenemos dos componentes:"]}),(0,r.jsx)(o,{color:"green",children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"AppComponent"})," (el componente padre)."]}),"\n"]})}),(0,r.jsx)(o,{color:"blue",children:(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ChildComponent"})," (el componente hijo)."]}),"\n"]})}),(0,r.jsxs)(n.p,{children:["En este ejemplo, ",(0,r.jsx)(n.code,{children:"ChildComponent"})," tiene un bot\xf3n que incrementa un contador. Cada vez que el usuario hace clic, se env\xeda el valor actualizado de ese contador a ",(0,r.jsx)(n.code,{children:"AppComponent"})," para que lo muestre."]}),(0,r.jsx)(n.h3,{id:"c\xf3digo-del-ejemplo",children:"C\xf3digo del Ejemplo"}),(0,r.jsxs)(i,{children:[(0,r.jsx)(t,{value:"child.component.ts",label:"child.component.ts",children:(0,r.jsxs)(o,{color:"green",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"app.component.ts"})," (componente padre)"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Component } from '@angular/core';\r\nimport { ChildComponent } from './child.component';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  template: `\r\n    <app-child (incrementCountEvent)=\"updateCount($event)\"></app-child>\r\n    <p>Contador en el padre: {{ count }}</p>\r\n  `,\r\n  standalone: true,\r\n  imports: [ChildComponent],\r\n})\r\nexport class AppComponent {\r\n  count = 0;\r\n\r\n  updateCount(newCount: number) {\r\n    this.count = newCount;  // Actualiza el contador en el padre con el valor emitido desde el hijo\r\n  }\r\n}\n"})})]})}),(0,r.jsx)(t,{value:"app.component.ts",label:"app.component.ts",default:!0,children:(0,r.jsxs)(o,{color:"blue",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"child.component.ts"})," (componente hijo)"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Component, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-child',\r\n  template: `\r\n    <button (click)=\"onClick()\">A\xf1adir n\xfamero</button>\r\n  `,\r\n  standalone: true,\r\n})\r\nexport class ChildComponent {\r\n  @Output() incrementCountEvent = new EventEmitter<number>();  // Declara el evento\r\n\r\n  count = 0;\r\n\r\n  onClick() {\r\n    this.count++;  // Incrementa el contador cada vez que se hace clic\r\n    this.incrementCountEvent.emit(this.count);  // Emite el valor actualizado del contador\r\n  }\r\n}\n"})})]})})]}),(0,r.jsxs)(o,{children:[(0,r.jsx)(n.h3,{id:"explicaci\xf3n-paso-a-paso",children:"Explicaci\xf3n Paso a Paso"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Definir el Evento con ",(0,r.jsx)(n.code,{children:"@Output"})," en el Hijo"]}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["En ",(0,r.jsx)(n.code,{children:"ChildComponent"}),", definimos ",(0,r.jsx)(n.code,{children:"incrementCountEvent"})," con ",(0,r.jsx)(n.code,{children:"@Output"})," y lo configuramos como ",(0,r.jsx)(n.code,{children:"new EventEmitter<number>()"}),". Esto convierte a ",(0,r.jsx)(n.code,{children:"incrementCountEvent"})," en un evento personalizado que enviar\xe1 n\xfameros (",(0,r.jsx)(n.code,{children:"number"}),") al componente padre."]}),"\n",(0,r.jsxs)(n.li,{children:["Esta declaraci\xf3n es como decir: ",(0,r.jsxs)(n.em,{children:['"Tengo un evento listo para ser lanzado y se llama ',(0,r.jsx)(n.code,{children:"incrementCountEvent"}),'"']}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Emitir el Evento desde el Hijo"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["En la funci\xf3n ",(0,r.jsx)(n.code,{children:"onClick()"}),", cada vez que el bot\xf3n es presionado, incrementamos ",(0,r.jsx)(n.code,{children:"count"})," y luego usamos ",(0,r.jsx)(n.code,{children:"this.incrementCountEvent.emit(this.count)"})," para lanzar el evento, enviando el valor actual de ",(0,r.jsx)(n.code,{children:"count"}),"."]}),"\n",(0,r.jsx)(n.li,{children:'Este valor ser\xe1 "escuchado" por el componente padre, que lo usar\xe1 para actualizar su propio contador.'}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Escuchar el Evento en el Padre"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["En ",(0,r.jsx)(n.code,{children:"AppComponent"}),", configuramos el HTML para que el evento personalizado ",(0,r.jsx)(n.code,{children:"(incrementCountEvent)"})," del componente ",(0,r.jsx)(n.code,{children:"<app-child>"})," dispare la funci\xf3n ",(0,r.jsx)(n.code,{children:"updateCount($event)"})," cada vez que el hijo emita un nuevo valor."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"$event"})," contiene el valor de ",(0,r.jsx)(n.code,{children:"count"})," emitido desde el hijo, que ser\xe1 capturado y enviado como argumento a ",(0,r.jsx)(n.code,{children:"updateCount"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Actualizar el Valor en el Padre"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["En ",(0,r.jsx)(n.code,{children:"updateCount(newCount: number)"}),", la variable ",(0,r.jsx)(n.code,{children:"count"})," del padre se actualiza con el valor recibido desde el hijo. Luego, este valor es accesible en el HTML del padre."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mostrar el Resultado en el Padre"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Finalmente, en el HTML de ",(0,r.jsx)(n.code,{children:"AppComponent"}),", el valor de ",(0,r.jsx)(n.code,{children:"count"})," se muestra en pantalla. Ahora, cada vez que presiones el bot\xf3n en ",(0,r.jsx)(n.code,{children:"ChildComponent"}),", ",(0,r.jsx)(n.code,{children:"count"})," se incrementar\xe1 y se ver\xe1 reflejado en el padre."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})]}),"\n",(0,r.jsxs)(n.h3,{id:"por-qu\xe9-es-\xfatil-output",children:["\xbfPor qu\xe9 es \xfatil ",(0,r.jsx)(n.code,{children:"@Output"}),"?"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@Output"})," y ",(0,r.jsx)(n.code,{children:"EventEmitter"}),' permiten que los componentes hijos sean m\xe1s aut\xf3nomos y f\xe1ciles de manejar. En lugar de que el padre tenga que gestionar directamente cada acci\xf3n del hijo, el hijo se encarga de "decirle" al padre cu\xe1ndo algo importante sucede. Esto hace que el c\xf3digo sea m\xe1s modular, reutilizable y f\xe1cil de mantener.']}),"\n",(0,r.jsx)(n.p,{children:"En nuestro ejemplo:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ChildComponent"})," es un componente reutilizable que puede emitir el evento ",(0,r.jsx)(n.code,{children:"incrementCountEvent"})," en cualquier lugar donde sea utilizado, y cualquier componente padre puede escuchar este evento y hacer lo que necesite con el dato emitido."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["En resumen, ",(0,r.jsx)(n.code,{children:"@Output"})," es clave para la ",(0,r.jsx)(n.strong,{children:"comunicaci\xf3n unidireccional"})," desde el componente hijo al padre en Angular, y este flujo de datos simplifica mucho la estructura de las aplicaciones."]})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>l});var r=o(6540);const c={},t=r.createContext(c);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);