"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[2637],{861:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});var r=n(4848),s=n(8453);const i={title:"JUnit"},l=void 0,t={id:"Lenguajes de programaci\xf3n/Java/Pruebas unitarias/Dependencias para test unitarios/JUnit",title:"JUnit",description:"JUnit es un framework de pruebas unitarias para el lenguaje de programaci\xf3n Java.",source:"@site/docs/Lenguajes de programaci\xf3n/Java/Pruebas unitarias/Dependencias para test unitarios/JUnit.md",sourceDirName:"Lenguajes de programaci\xf3n/Java/Pruebas unitarias/Dependencias para test unitarios",slug:"/Lenguajes de programaci\xf3n/Java/Pruebas unitarias/Dependencias para test unitarios/JUnit",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Pruebas unitarias/Dependencias para test unitarios/JUnit",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Lenguajes de programaci\xf3n/Java/Pruebas unitarias/Dependencias para test unitarios/JUnit.md",tags:[],version:"current",frontMatter:{title:"JUnit"},sidebar:"tutorialSidebar",previous:{title:"Dependencias",permalink:"/notas-de-aprendizaje/docs/category/dependencias"},next:{title:"Introducci\xf3n a Spring Boot",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring Boot/Introducci\xf3n a Spring Boot"}},o={},c=[{value:"Instalaci\xf3n",id:"instalaci\xf3n",level:2},{value:"Ejemplo",id:"ejemplo",level:2},{value:"Cobertura de las pruebas",id:"cobertura-de-las-pruebas",level:2},{value:"Instalaci\xf3n de JaCoCo (Java Code Coverage)",id:"instalaci\xf3n-de-jacoco-java-code-coverage",level:3},{value:"Estructura Given, When, Then",id:"estructura-given-when-then",level:2},{value:"Tipos de aserciones",id:"tipos-de-aserciones",level:2}];function d(e){const a={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Card:n}=a;return n||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:"JUnit"})," es un framework de pruebas unitarias para el lenguaje de programaci\xf3n ",(0,r.jsx)(a.strong,{children:"Java"}),"."]}),"\n",(0,r.jsx)(a.p,{children:"Este framework permite la creaci\xf3n de pruebas unitarias de forma sencilla y r\xe1pida, tambi\xe9n proporciona una estructura clara y organizada para las pruebas."}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)(a.h2,{id:"instalaci\xf3n",children:"Instalaci\xf3n"}),(0,r.jsxs)(a.p,{children:["Para instalar JUnit en un proyecto Java, se debe buscar la dependencia ",(0,r.jsx)(a.strong,{children:(0,r.jsx)(a.code,{children:"junit-jupiter"})})," del grupo ",(0,r.jsx)(a.strong,{children:(0,r.jsx)(a.code,{children:"org.junit.jupiter"})})," en el ",(0,r.jsx)(a.a,{href:"https://central.sonatype.com/?smo=true",children:"repositorio central de Maven"})," y agregarla al archivo ",(0,r.jsx)(a.code,{children:"pom.xml"}),"."]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-xml",metastring:"title='pom.xml'",children:"<dependency>\r\n    <groupId>org.junit.jupiter</groupId>\r\n    <artifactId>junit-jupiter</artifactId>\r\n    <version>5.11.0-M2</version> \x3c!-- Reemplaza con la versi\xf3n m\xe1s reciente encontrada --\x3e\r\n</dependency>\n"})})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)(a.h2,{id:"ejemplo",children:"Ejemplo"}),(0,r.jsx)(a.p,{children:"A continuaci\xf3n se muestra un ejemplo de una prueba unitaria con JUnit."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"title='Ejemplo.java'",children:"\r\npackage com.example.app;\r\n\r\npublic class Ejemplo {\r\n\r\n    public int sumar(int a, int b) {\r\n        return a + b;\r\n    }\r\n\r\n}\r\n\n"})}),(0,r.jsxs)(n,{color:"green",children:[(0,r.jsx)(a.p,{children:"Ejemplo de test unitario aprobado."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"title='EjemploTest.java'",children:"\r\nimport org.junit.jupiter.api.Test;\r\n\r\npublic class EjemploTest {\r\n\r\n    @Test\r\n    public void testSumar() {\r\n\r\n        Ejemplo ejemplo = new Ejemplo();\r\n        int resultado = ejemplo.sumar(4, 4); // 4 + 4 = 8\r\n        assertEquals(8, resultado); // El test pasa porque 8 es igual a 8\r\n\r\n    }\r\n\r\n}\r\n\n"})})]}),(0,r.jsxs)(n,{color:"red",children:[(0,r.jsx)(a.p,{children:"Ejemplo de test unitario fallido."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"title='EjemploTest.java'",children:"\r\nimport org.junit.jupiter.api.Test;\r\n\r\npublic class EjemploTest {\r\n\r\n    @Test\r\n    public void testSumar() {\r\n\r\n        Ejemplo ejemplo = new Ejemplo();\r\n        int resultado = ejemplo.sumar(4, 4); // 4 + 4 = 8\r\n        assertEquals(9, resultado); // El test falla porque 9 no es igual a 8\r\n\r\n    }\r\n\r\n}\r\n\n"})})]})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)(a.h2,{id:"cobertura-de-las-pruebas",children:"Cobertura de las pruebas"}),(0,r.jsxs)(a.p,{children:["La ",(0,r.jsx)(a.strong,{children:"cobertura de las pruebas"})," es una m\xe9trica que mide el porcentaje de c\xf3digo que ha sido ejecutado por las pruebas unitarias."]}),(0,r.jsx)(a.p,{children:"Es importante tener una alta cobertura de las pruebas para garantizar que el c\xf3digo est\xe9 bien probado y que se detecten posibles errores."}),(0,r.jsxs)(a.p,{children:["En JUnit, se puede utilizar la herramienta ",(0,r.jsx)(a.strong,{children:"JaCoCo"})," (Java Code Coverage) para medir la cobertura de las pruebas."]}),(0,r.jsx)(a.h3,{id:"instalaci\xf3n-de-jacoco-java-code-coverage",children:"Instalaci\xf3n de JaCoCo (Java Code Coverage)"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"title='Plugin JaCoCo en el archivo pom.xml para Maven'",children:"<build>\r\n    <plugins>\r\n        <plugin>\r\n            <groupId>org.jacoco</groupId>\r\n            <artifactId>jacoco-maven-plugin</artifactId>\r\n            <version>0.8.8</version> \x3c!-- Usar la versi\xf3n que se necesite --\x3e\r\n            <executions>\r\n                <execution>\r\n                    <goals>\r\n                        <goal>prepare-agent</goal>\r\n                    </goals>\r\n                </execution>\r\n                <execution>\r\n                    <id>report</id>\r\n                    <phase>test</phase>\r\n                    <goals>\r\n                        <goal>report</goal>\r\n                    </goals>\r\n                </execution>\r\n            </executions>\r\n        </plugin>\r\n    </plugins>\r\n</build>\n"})})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)(a.h2,{id:"estructura-given-when-then",children:"Estructura Given, When, Then"}),(0,r.jsxs)(a.p,{children:["La estructura ",(0,r.jsx)(a.strong,{children:"Given, When, Then"})," es una t\xe9cnica utilizada para escribir pruebas unitarias de forma clara y organizada."]}),(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:"Given"}),": Se proporcionan los datos de entrada y se configura el entorno de la prueba."]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:"When"}),": Se ejecuta el m\xe9todo que se desea probar."]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:"Then"}),": Se verifica que el resultado sea el esperado."]}),"\n"]}),"\n"]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"title='Ejemplo'",children:"\r\npackage com.example.app;\r\n\r\nimport org.junit.jupiter.api.Test;\r\n\r\npublic class EjemploTest {\r\n\r\n    @Test\r\n    public void testSumar() {\r\n\r\n        // Given | Se proporcionan los datos de entrada y se configura el entorno de la prueba\r\n        Ejemplo ejemplo = new Ejemplo();\r\n        int a = 4;\r\n        int b = 4;\r\n\r\n        // When | Se ejecuta el m\xe9todo que se desea probar\r\n        int resultado = ejemplo.sumar(a, b);\r\n\r\n        // Then | Se verifica que el resultado sea el esperado\r\n        assertEquals(8, resultado);\r\n\r\n    }\r\n\r\n}\r\n\n"})}),(0,r.jsxs)(a.p,{children:["En el ejemplo anterior, se sigui\xf3 la estructura ",(0,r.jsx)(a.strong,{children:"Given, When, Then"})," para escribir una prueba unitaria del m\xe9todo ",(0,r.jsx)(a.code,{children:"sumar"})," de la clase ",(0,r.jsx)(a.code,{children:"Ejemplo"}),", la prueba es aprobada porque el resultado es el esperado."]})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)(a.h2,{id:"tipos-de-aserciones",children:"Tipos de aserciones"}),(0,r.jsx)(a.p,{children:"JUnit proporciona varios m\xe9todos de aserci\xf3n para verificar que los resultados de las pruebas sean los esperados."}),(0,r.jsx)(a.admonition,{type:"warning",children:(0,r.jsxs)(a.p,{children:["Para los siguientes ejemplos se tiene en cuenta que la variable ",(0,r.jsx)(a.code,{children:"resultado"})," es igual a 8."]})}),(0,r.jsxs)(n,{color:"darkBlue",children:[(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:(0,r.jsx)(a.code,{children:"assertEquals(expected, actual)"})}),": Verifica que dos valores sean iguales."]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"assertEquals(8, resultado); // Verifica que 8 sea igual a resultado, si no son iguales, el test falla\n"})}),(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:(0,r.jsx)(a.code,{children:"assertNotEquals(expected, actual)"})}),": Verifica que dos valores no sean iguales."]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"assertNotEquals(9, resultado); // Verifica que 9 no sea igual a resultado, si son iguales, el test falla\n"})})]}),(0,r.jsxs)(n,{color:"magenta",children:[(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:(0,r.jsx)(a.code,{children:"assertTrue(condition)"})}),": Verifica que una condici\xf3n sea verdadera."]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"assertTrue(resultado == 8); // Verifica que la condici\xf3n sea verdadera, si es falsa, el test falla\n"})}),(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:(0,r.jsx)(a.code,{children:"assertFalse(condition)"})}),": Verifica que una condici\xf3n sea falsa."]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"assertFalse(resultado == 9); // Verifica que la condici\xf3n sea falsa, si es verdadera, el test falla\n"})})]}),(0,r.jsxs)(n,{color:"cyan",children:[(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:(0,r.jsx)(a.code,{children:"assertNull(actual)"})}),": Verifica que un valor sea nulo."]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"assertNull(null); // Verifica que el valor sea nulo, si no es nulo, el test falla\n"})}),(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:(0,r.jsx)(a.code,{children:"assertNotNull(actual)"})}),": Verifica que un valor no sea nulo."]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"assertNotNull(resultado); // Verifica que el valor no sea nulo, si es nulo, el test falla\n"})})]}),(0,r.jsxs)(n,{color:"pink",children:[(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:(0,r.jsx)(a.code,{children:"assertInstanceOf(expectedType, actual)"})}),": Verifica que un objeto sea una instancia de un tipo espec\xedfico."]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"assertInstanceOf(Integer.class, resultado); // Verifica que resultado sea una instancia de Integer, si no lo es, el test falla\n"})}),(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:(0,r.jsx)(a.code,{children:"assertNotInstanceOf(expectedType, actual)"})}),": Verifica que un objeto no sea una instancia de un tipo espec\xedfico."]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"assertNotInstanceOf(String.class, resultado); // Verifica que resultado no sea una instancia de String, si lo es, el test falla\n"})})]}),(0,r.jsxs)(n,{color:"yellow",children:[(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:(0,r.jsx)(a.code,{children:"assertThrows(expectedException, executable)"})}),": Verifica que un m\xe9todo lance una excepci\xf3n."]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"assertThrows(ArithmeticException.class, () -> {\r\n    int division = 1 / 0; // Lanza una excepci\xf3n de divisi\xf3n por cero\r\n});\n"})})]})]})]})}function u(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>l,x:()=>t});var r=n(6540);const s={},i=r.createContext(s);function l(e){const a=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(i.Provider,{value:a},e.children)}}}]);