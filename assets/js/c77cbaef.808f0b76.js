"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[9529],{854:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>u});var r=n(4848),i=n(8453);const s={title:"1 - Usuario y contrase\xf1a"},o=void 0,t={id:"Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/UsuarioYContrase\xf1a",title:"1 - Usuario y contrase\xf1a",description:"C\xf3mo funciona en Spring Security",source:"@site/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/UsuarioYContrase\xf1a.md",sourceDirName:"Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n",slug:"/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/UsuarioYContrase\xf1a",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/UsuarioYContrase\xf1a",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/UsuarioYContrase\xf1a.md",tags:[],version:"current",lastUpdatedBy:"SanRM",lastUpdatedAt:1728966437e3,frontMatter:{title:"1 - Usuario y contrase\xf1a"},sidebar:"tutorialSidebar",previous:{title:"Autenticaci\xf3n",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/"},next:{title:"Metodolog\xedas de desarrollo de software",permalink:"/notas-de-aprendizaje/docs/category/metodolog\xedas-de-desarrollo-de-software"}},c={},u=[{value:"C\xf3mo funciona en Spring Security",id:"c\xf3mo-funciona-en-spring-security",level:2},{value:"Ejemplo simple de Autenticaci\xf3n con Nombre de Usuario y Contrase\xf1a",id:"ejemplo-simple-de-autenticaci\xf3n-con-nombre-de-usuario-y-contrase\xf1a",level:3},{value:"Explicaci\xf3n paso a paso:",id:"explicaci\xf3n-paso-a-paso",level:3},{value:"\xbfC\xf3mo puedo personalizar la Autenticaci\xf3n?",id:"c\xf3mo-puedo-personalizar-la-autenticaci\xf3n",level:3},{value:"Otras formas de manejar la autenticaci\xf3n",id:"otras-formas-de-manejar-la-autenticaci\xf3n",level:2},{value:"1. <strong>Gestionar usuarios en memoria</strong>",id:"1-gestionar-usuarios-en-memoria",level:3},{value:"2. <strong>Gestionar usuarios en una base de datos</strong>",id:"2-gestionar-usuarios-en-una-base-de-datos",level:3},{value:"Publicar un AuthenticationManager para autenticaci\xf3n personalizada",id:"publicar-un-authenticationmanager-para-autenticaci\xf3n-personalizada",level:3},{value:"Ejemplo de configuraci\xf3n para autenticaci\xf3n personalizada:",id:"ejemplo-de-configuraci\xf3n-para-autenticaci\xf3n-personalizada",level:4},{value:"Crear un controlador REST para manejar la autenticaci\xf3n",id:"crear-un-controlador-rest-para-manejar-la-autenticaci\xf3n",level:3},{value:"Ejemplo de un controlador REST para manejar el login:",id:"ejemplo-de-un-controlador-rest-para-manejar-el-login",level:4},{value:"Personalizar el AuthenticationManager",id:"personalizar-el-authenticationmanager",level:2},{value:"Ejemplo de c\xf3mo personalizar el AuthenticationManager:",id:"ejemplo-de-c\xf3mo-personalizar-el-authenticationmanager",level:4},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function l(e){const a={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Card:n}=a;return n||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h2,{id:"c\xf3mo-funciona-en-spring-security",children:"C\xf3mo funciona en Spring Security"}),"\n",(0,r.jsx)(a.p,{children:"Spring Security es una herramienta que ayuda a que las aplicaciones sean m\xe1s seguras, uno de sus trabajos es verificar que el nombre de usuario y la contrase\xf1a sean correctos."}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Aqu\xed veremos un ejemplo b\xe1sico de c\xf3mo configurar este tipo de autenticaci\xf3n."}),"\n"]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)(a.h3,{id:"ejemplo-simple-de-autenticaci\xf3n-con-nombre-de-usuario-y-contrase\xf1a",children:"Ejemplo simple de Autenticaci\xf3n con Nombre de Usuario y Contrase\xf1a"}),(0,r.jsxs)(a.p,{children:["Este es un ejemplo b\xe1sico de c\xf3mo se puede configurar esta autenticaci\xf3n en ",(0,r.jsx)(a.strong,{children:"Spring Security"})," usando c\xf3digo en ",(0,r.jsx)(a.strong,{children:"Java"}),"."]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'@Configuration  // Indica que estamos configurando algo\r\n@EnableWebSecurity  // Activa las caracter\xedsticas de seguridad de Spring Security\r\npublic class SecurityConfig {\r\n\r\n    @Bean  // Este m\xe9todo devuelve un objeto que otros m\xe9todos pueden usar\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .authorizeHttpRequests((authorize) -> authorize\r\n                .anyRequest().authenticated()  // Cualquier solicitud debe estar autenticada (verificar nombre de usuario/contrase\xf1a)\r\n            )\r\n            .httpBasic(Customizer.withDefaults())  // Habilita la autenticaci\xf3n HTTP b\xe1sica\r\n            .formLogin(Customizer.withDefaults());  // Habilita la autenticaci\xf3n a trav\xe9s de un formulario (usuario/contrase\xf1a)\r\n\r\n        return http.build();  // Devuelve la configuraci\xf3n de seguridad\r\n    }\r\n\r\n    @Bean  // Este m\xe9todo gestiona los usuarios\r\n    public UserDetailsService userDetailsService() {\r\n        UserDetails userDetails = User.withDefaultPasswordEncoder()  // Crea un usuario con contrase\xf1a codificada\r\n            .username("user")  // Nombre de usuario\r\n            .password("password")  // Contrase\xf1a\r\n            .roles("USER")  // Rol del usuario\r\n            .build();\r\n\r\n        return new InMemoryUserDetailsManager(userDetails);  // Los detalles del usuario se guardan en la memoria (solo mientras la app est\xe1 en ejecuci\xf3n)\r\n    }\r\n}\n'})}),(0,r.jsx)(a.h3,{id:"explicaci\xf3n-paso-a-paso",children:"Explicaci\xf3n paso a paso:"}),(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"@Configuration y @EnableWebSecurity"}),": Estas etiquetas indican que vamos a configurar la seguridad de la aplicaci\xf3n."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"authorizeHttpRequests"}),": Aqu\xed se indica que cualquier solicitud a la aplicaci\xf3n necesita que el usuario est\xe9 autenticado."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"httpBasic() y formLogin()"}),": Estas dos l\xedneas habilitan dos maneras de autenticarse:","\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"httpBasic()"}),": Es una forma sencilla donde el navegador te pedir\xe1 tu usuario y contrase\xf1a con una ventana emergente."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"formLogin()"}),": Esto genera un formulario de login m\xe1s amigable, como los que vemos en las aplicaciones web."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"UserDetailsService"}),': Define un usuario (con el nombre de usuario "user" y contrase\xf1a "password") que se almacena en la memoria temporalmente.']}),"\n"]})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)(a.h3,{id:"c\xf3mo-puedo-personalizar-la-autenticaci\xf3n",children:"\xbfC\xf3mo puedo personalizar la Autenticaci\xf3n?"}),(0,r.jsx)(a.p,{children:"Spring Security te permite hacer mucho m\xe1s que solo manejar usuarios en memoria. A continuaci\xf3n, veremos diferentes formas de personalizar la autenticaci\xf3n seg\xfan tus necesidades."}),(0,r.jsx)(a.h2,{id:"otras-formas-de-manejar-la-autenticaci\xf3n",children:"Otras formas de manejar la autenticaci\xf3n"}),(0,r.jsxs)(n,{color:"blue",children:[(0,r.jsxs)(a.h3,{id:"1-gestionar-usuarios-en-memoria",children:["1. ",(0,r.jsx)(a.strong,{children:"Gestionar usuarios en memoria"})]}),(0,r.jsx)(a.p,{children:"El ejemplo que vimos guarda los usuarios en la memoria. Esto es \xfatil para pruebas, pero no para aplicaciones en producci\xf3n."})]}),(0,r.jsxs)(n,{color:"blue",children:[(0,r.jsxs)(a.h3,{id:"2-gestionar-usuarios-en-una-base-de-datos",children:["2. ",(0,r.jsx)(a.strong,{children:"Gestionar usuarios en una base de datos"})]}),(0,r.jsx)(a.p,{children:"Si prefieres almacenar los usuarios en una base de datos (lo m\xe1s com\xfan en aplicaciones reales), puedes configurar Spring Security para que verifique las credenciales de la base de datos en lugar de la memoria."})]}),(0,r.jsxs)(n,{color:"red",children:[(0,r.jsx)(a.h3,{id:"publicar-un-authenticationmanager-para-autenticaci\xf3n-personalizada",children:"Publicar un AuthenticationManager para autenticaci\xf3n personalizada"}),(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:"AuthenticationManager"})," es el encargado de verificar si las credenciales (nombre de usuario/contrase\xf1a) son correctas. A veces, necesitas configurar tu propio ",(0,r.jsx)(a.strong,{children:"AuthenticationManager"})," para casos m\xe1s avanzados, como autenticaci\xf3n en una API REST en lugar de un formulario de login."]}),(0,r.jsx)(a.h4,{id:"ejemplo-de-configuraci\xf3n-para-autenticaci\xf3n-personalizada",children:"Ejemplo de configuraci\xf3n para autenticaci\xf3n personalizada:"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .authorizeHttpRequests((authorize) -> authorize\r\n                .requestMatchers("/login").permitAll()  // Permitir acceso sin autenticaci\xf3n a la p\xe1gina de login\r\n                .anyRequest().authenticated()  // Cualquier otra solicitud debe estar autenticada\r\n            );\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(\r\n            UserDetailsService userDetailsService,\r\n            PasswordEncoder passwordEncoder) {\r\n        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();  // Proveedor que maneja la autenticaci\xf3n\r\n        authenticationProvider.setUserDetailsService(userDetailsService);  // Usar el servicio de detalles del usuario que definimos\r\n        authenticationProvider.setPasswordEncoder(passwordEncoder);  // Codificador de contrase\xf1as\r\n\r\n        return new ProviderManager(authenticationProvider);  // Devuelve un AuthenticationManager personalizado\r\n    }\r\n\r\n    @Bean\r\n    public UserDetailsService userDetailsService() {\r\n        UserDetails userDetails = User.withDefaultPasswordEncoder()\r\n            .username("user")\r\n            .password("password")\r\n            .roles("USER")\r\n            .build();\r\n\r\n        return new InMemoryUserDetailsManager(userDetails);\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return PasswordEncoderFactories.createDelegatingPasswordEncoder();  // Codifica las contrase\xf1as de manera segura\r\n    }\r\n\r\n}\n'})}),(0,r.jsx)(a.p,{children:"En este caso:"}),(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["Configuramos un ",(0,r.jsx)(a.strong,{children:"AuthenticationManager"})," personalizado."]}),"\n",(0,r.jsxs)(a.li,{children:["Creamos un controlador REST (",(0,r.jsx)(a.code,{children:"@RestController"}),") que puede manejar las solicitudes de login de una API."]}),"\n"]})]}),(0,r.jsxs)(n,{color:"red",children:[(0,r.jsx)(a.h3,{id:"crear-un-controlador-rest-para-manejar-la-autenticaci\xf3n",children:"Crear un controlador REST para manejar la autenticaci\xf3n"}),(0,r.jsx)(a.p,{children:"A veces no quieres que los usuarios inicien sesi\xf3n a trav\xe9s de un formulario, sino que quieres manejar todo a trav\xe9s de una API (algo muy com\xfan en aplicaciones m\xf3viles)."}),(0,r.jsx)(a.h4,{id:"ejemplo-de-un-controlador-rest-para-manejar-el-login",children:"Ejemplo de un controlador REST para manejar el login:"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'@RestController\r\npublic class LoginController {\r\n\r\n    private final AuthenticationManager authenticationManager;\r\n\r\n    public LoginController(AuthenticationManager authenticationManager) {\r\n        this.authenticationManager = authenticationManager;\r\n    }\r\n\r\n    @PostMapping("/login")\r\n    public ResponseEntity<Void> login(@RequestBody LoginRequest loginRequest) {\r\n        Authentication authenticationRequest =\r\n            UsernamePasswordAuthenticationToken.unauthenticated(loginRequest.username(), loginRequest.password());\r\n        Authentication authenticationResponse =\r\n            this.authenticationManager.authenticate(authenticationRequest);\r\n        // Aqu\xed podr\xedas manejar lo que pasa despu\xe9s de autenticar correctamente\r\n        return ResponseEntity.ok().build();\r\n    }\r\n\r\n    public record LoginRequest(String username, String password) {\r\n    }\r\n}\n'})}),(0,r.jsx)(a.p,{children:"Aqu\xed:"}),(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"El usuario env\xeda su nombre de usuario y contrase\xf1a a trav\xe9s de una solicitud POST."}),"\n",(0,r.jsxs)(a.li,{children:["El controlador verifica las credenciales usando el ",(0,r.jsx)(a.strong,{children:"AuthenticationManager"})," y responde si todo est\xe1 bien."]}),"\n"]})]}),(0,r.jsxs)(n,{color:"orange",children:[(0,r.jsx)(a.h2,{id:"personalizar-el-authenticationmanager",children:"Personalizar el AuthenticationManager"}),(0,r.jsxs)(a.p,{children:["Spring Security normalmente crea su propio ",(0,r.jsx)(a.strong,{children:"AuthenticationManager"}),", pero en algunos casos quieres personalizarlo. Por ejemplo, podr\xedas necesitar que el sistema no borre las credenciales despu\xe9s de autenticar, lo que es \xfatil si necesitas usar las credenciales para algo m\xe1s tarde."]}),(0,r.jsx)(a.h4,{id:"ejemplo-de-c\xf3mo-personalizar-el-authenticationmanager",children:"Ejemplo de c\xf3mo personalizar el AuthenticationManager:"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"@Bean\r\npublic AuthenticationManager authenticationManager(\r\n        UserDetailsService userDetailsService,\r\n        PasswordEncoder passwordEncoder) {\r\n    DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();\r\n    authenticationProvider.setUserDetailsService(userDetailsService);\r\n    authenticationProvider.setPasswordEncoder(passwordEncoder);\r\n\r\n    ProviderManager providerManager = new ProviderManager(authenticationProvider);\r\n    providerManager.setEraseCredentialsAfterAuthentication(false);  // Desactiva el borrado de credenciales\r\n\r\n    return providerManager;\r\n}\n"})})]})]}),"\n",(0,r.jsx)(a.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,r.jsx)(a.p,{children:"La autenticaci\xf3n con nombre de usuario y contrase\xf1a es el m\xe9todo m\xe1s com\xfan y sencillo. Spring Security te ofrece mucha flexibilidad para personalizar c\xf3mo gestionas a los usuarios y la autenticaci\xf3n. Puedes:"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Guardar usuarios en la memoria, bases de datos o incluso en LDAP (Lightweight Directory Access Protocol)."}),"\n",(0,r.jsx)(a.li,{children:"Configurar autenticaci\xf3n b\xe1sica o a trav\xe9s de formularios."}),"\n",(0,r.jsxs)(a.li,{children:["Personalizar c\xf3mo se gestionan las credenciales a trav\xe9s de un ",(0,r.jsx)(a.strong,{children:"AuthenticationManager"}),"."]}),"\n"]})]})}function d(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>t});var r=n(6540);const i={},s=r.createContext(i);function o(e){const a=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:a},e.children)}}}]);