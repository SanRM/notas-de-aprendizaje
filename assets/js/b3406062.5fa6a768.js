"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[9248],{352:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>t,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(4848),s=n(8453);const o={sidebar_position:24},i=void 0,l={id:"Frameworks/Angular/Pipes/Crear pipes personalizados",title:"Crear pipes personalizados",description:"En Angular, los pipes (tubos o conductos) son herramientas que transforman datos en las plantillas sin necesidad de realizar manipulaciones complejas en el c\xf3digo de la clase del componente. Aunque Angular incluye varios pipes predeterminados (como uppercase o date), podemos crear pipes personalizados para adaptarlos a nuestras necesidades espec\xedficas.",source:"@site/docs/Frameworks/Angular/Pipes/Crear pipes personalizados.md",sourceDirName:"Frameworks/Angular/Pipes",slug:"/Frameworks/Angular/Pipes/Crear pipes personalizados",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Pipes/Crear pipes personalizados",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Frameworks/Angular/Pipes/Crear pipes personalizados.md",tags:[],version:"current",lastUpdatedBy:"SanRM",lastUpdatedAt:1730678194e3,sidebarPosition:24,frontMatter:{sidebar_position:24},sidebar:"tutorialSidebar",previous:{title:"Formateo de datos con pipes en angular",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Pipes/Formateo de datos con pipes en angular"},next:{title:"Creaci\xf3n de un servicio inyectable",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Inyecci\xf3n de dependencias/Creaci\xf3n de un servicio inyectable"}},d={},p=[{value:"Paso 1: Crear la Clase del Pipe con el Decorador <code>@Pipe</code>",id:"paso-1-crear-la-clase-del-pipe-con-el-decorador-pipe",level:4},{value:"Paso 2: Crear el Pipe Personalizado <code>ReversePipe</code>",id:"paso-2-crear-el-pipe-personalizado-reversepipe",level:4},{value:"Paso 3: Usar el <code>ReversePipe</code> en la Plantilla",id:"paso-3-usar-el-reversepipe-en-la-plantilla",level:4}];function c(e){const r={code:"code",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Card:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(r.p,{children:["En Angular, los ",(0,a.jsx)(r.strong,{children:"pipes"})," (tubos o conductos) son herramientas que transforman datos en las plantillas sin necesidad de realizar manipulaciones complejas en el c\xf3digo de la clase del componente. Aunque Angular incluye varios pipes predeterminados (como ",(0,a.jsx)(r.code,{children:"uppercase"})," o ",(0,a.jsx)(r.code,{children:"date"}),"), podemos crear pipes personalizados para adaptarlos a nuestras necesidades espec\xedficas."]}),"\n",(0,a.jsx)(r.p,{children:"En este ejemplo, aprenderemos c\xf3mo crear un pipe personalizado que invierta el texto y c\xf3mo usarlo en la plantilla de un componente."}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsxs)(r.h4,{id:"paso-1-crear-la-clase-del-pipe-con-el-decorador-pipe",children:["Paso 1: Crear la Clase del Pipe con el Decorador ",(0,a.jsx)(r.code,{children:"@Pipe"})]}),(0,a.jsxs)(r.p,{children:["Un pipe en Angular es una clase TypeScript que utiliza el decorador ",(0,a.jsx)(r.code,{children:"@Pipe"}),". Este decorador le da a Angular la informaci\xf3n necesaria para identificar el pipe y usarlo en las plantillas."]}),(0,a.jsx)(r.p,{children:"Aqu\xed tienes un ejemplo b\xe1sico de un pipe que envuelve una cadena de texto con estrellas:"}),(0,a.jsx)(n,{children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    standalone: true,\r\n  name: 'star',\r\n})\r\nexport class StarPipe implements PipeTransform {\r\n    transform(value: string): string {\r\n        return `\u2b50\ufe0f ${value} \u2b50\ufe0f`;\r\n  }\r\n}\n"})})}),(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"name"}),": Este es el nombre que se usar\xe1 en la plantilla para aplicar el pipe."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"transform"}),": Aqu\xed se coloca la l\xf3gica de transformaci\xf3n. En este caso, toma un ",(0,a.jsx)(r.code,{children:"string"})," y lo devuelve rodeado de estrellas."]}),"\n"]})]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsxs)(r.h4,{id:"paso-2-crear-el-pipe-personalizado-reversepipe",children:["Paso 2: Crear el Pipe Personalizado ",(0,a.jsx)(r.code,{children:"ReversePipe"})]}),(0,a.jsxs)(r.p,{children:["Vamos a crear un pipe llamado ",(0,a.jsx)(r.code,{children:"ReversePipe"})," que invierte una cadena de texto."]}),(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsxs)(r.li,{children:["Empezamos creando el archivo ",(0,a.jsx)(r.code,{children:"reverse.pipe.ts"}),"."]}),"\n",(0,a.jsxs)(r.li,{children:["Agregamos el decorador ",(0,a.jsx)(r.code,{children:"@Pipe"})," con la configuraci\xf3n:"]}),"\n"]}),(0,a.jsx)(n,{children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    standalone: true,\r\n  name: 'reverse',\r\n})\r\nexport class ReversePipe implements PipeTransform {\r\n    transform(value: string): string {\r\n        let reverse = '';\r\n    for (let i = value.length - 1; i >= 0; i--) {\r\n        reverse += value[i];\r\n    }\r\n    return reverse;\r\n  }\r\n}\n"})})}),(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:["Este pipe toma una cadena y, dentro de ",(0,a.jsx)(r.code,{children:"transform"}),", la invierte. Recorre cada letra desde el final hasta el inicio y las concatena en una nueva cadena."]}),"\n"]})]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsxs)(r.h4,{id:"paso-3-usar-el-reversepipe-en-la-plantilla",children:["Paso 3: Usar el ",(0,a.jsx)(r.code,{children:"ReversePipe"})," en la Plantilla"]}),(0,a.jsxs)(r.p,{children:["Con el pipe ",(0,a.jsx)(r.code,{children:"ReversePipe"})," creado, ahora lo podemos aplicar en la plantilla de ",(0,a.jsx)(r.code,{children:"AppComponent"}),":"]}),(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsxs)(r.li,{children:["Incluimos ",(0,a.jsx)(r.code,{children:"ReversePipe"})," en los ",(0,a.jsx)(r.code,{children:"imports"})," del componente."]}),"\n",(0,a.jsxs)(r.li,{children:["Utilizamos el pipe en el HTML con el operador ",(0,a.jsx)(r.code,{children:"|"})," seguido del nombre del pipe, en este caso ",(0,a.jsx)(r.code,{children:"reverse"}),"."]}),"\n"]}),(0,a.jsx)(n,{children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"import { Component } from '@angular/core';\r\nimport { ReversePipe } from './reverse.pipe';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n  template: `Reverse Machine: {{ word | reverse }}`,\r\n  standalone: true,\r\n  imports: [ReversePipe],\r\n})\r\nexport class AppComponent {\r\n    word = 'Angular';\r\n}\n"})})}),(0,a.jsxs)(r.p,{children:["Aqu\xed, el pipe ",(0,a.jsx)(r.code,{children:"reverse"})," toma el valor de ",(0,a.jsx)(r.code,{children:"word"})," y lo invierte en la vista, mostrando ",(0,a.jsx)(r.code,{children:"ralugnA"})," en lugar de ",(0,a.jsx)(r.code,{children:"Angular"}),"."]})]}),"\n",(0,a.jsxs)(r.p,{children:["Los pipes personalizados en Angular nos permiten realizar transformaciones de datos de manera sencilla y directa en las plantillas. En este caso, creamos un ",(0,a.jsx)(r.code,{children:"ReversePipe"})," para invertir cadenas de texto. Ahora tienes una herramienta m\xe1s para hacer transformaciones personalizadas en tu aplicaci\xf3n Angular."]})]})}function t(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>l});var a=n(6540);const s={},o=a.createContext(s);function i(e){const r=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(o.Provider,{value:r},e.children)}}}]);