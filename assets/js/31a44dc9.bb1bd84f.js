"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[8212],{5841:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var i=t(4848),o=t(8453);const a={title:"SecurityContextHolder",sidebar_position:1},r=void 0,c={id:"Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/SecurityContextHolder",title:"SecurityContextHolder",description:"\xbfQu\xe9 es SecurityContextHolder?",source:"@site/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/SecurityContextHolder.md",sourceDirName:"Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n",slug:"/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/SecurityContextHolder",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/SecurityContextHolder",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/SecurityContextHolder.md",tags:[],version:"current",lastUpdatedBy:"SanRM",lastUpdatedAt:1729228641e3,sidebarPosition:1,frontMatter:{title:"SecurityContextHolder",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Arquitectura de autenticaci\xf3n de servlets",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/"},next:{title:"Interfaz Authentication",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/Interfaz Authentication"}},s={},l=[{value:"\xbfQu\xe9 es SecurityContextHolder?",id:"qu\xe9-es-securitycontextholder",level:3},{value:"\xbfQu\xe9 almacena el SecurityContextHolder?",id:"qu\xe9-almacena-el-securitycontextholder",level:4},{value:"\xbfQu\xe9 es el SecurityContext?",id:"qu\xe9-es-el-securitycontext",level:5},{value:"\xbfC\xf3mo se obtiene el SecurityContext?",id:"c\xf3mo-se-obtiene-el-securitycontext",level:5},{value:"Poblaci\xf3n del SecurityContextHolder",id:"poblaci\xf3n-del-securitycontextholder",level:3},{value:"Ejemplo Simple de Autenticaci\xf3n Manual",id:"ejemplo-simple-de-autenticaci\xf3n-manual",level:4},{value:"Desglose del C\xf3digo",id:"desglose-del-c\xf3digo",level:4},{value:"\xbfC\xf3mo se Usa el SecurityContextHolder?",id:"c\xf3mo-se-usa-el-securitycontextholder",level:3},{value:"Desglose del C\xf3digo",id:"desglose-del-c\xf3digo-1",level:4},{value:"\xbfD\xf3nde se Almacena el SecurityContext?",id:"d\xf3nde-se-almacena-el-securitycontext",level:3},{value:"Seguridad con ThreadLocal",id:"seguridad-con-threadlocal",level:4},{value:"Modos de Almacenamiento en SecurityContextHolder",id:"modos-de-almacenamiento-en-securitycontextholder",level:3},{value:"\xbfC\xf3mo Cambiar el Modo?",id:"c\xf3mo-cambiar-el-modo",level:3}];function d(e){const n={code:"code",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components},{Card:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"qu\xe9-es-securitycontextholder",children:"\xbfQu\xe9 es SecurityContextHolder?"}),"\n",(0,i.jsxs)(n.p,{children:["En el coraz\xf3n del modelo de autenticaci\xf3n de Spring Security est\xe1 el ",(0,i.jsx)(n.strong,{children:"SecurityContextHolder"}),". Es un contenedor que almacena la informaci\xf3n de seguridad del usuario actual, es decir, qui\xe9n est\xe1 autenticado en el sistema. Esta informaci\xf3n es esencial para saber qu\xe9 acciones puede realizar un usuario, bas\xe1ndose en sus permisos."]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)(n.h4,{id:"qu\xe9-almacena-el-securitycontextholder",children:"\xbfQu\xe9 almacena el SecurityContextHolder?"}),(0,i.jsxs)(n.p,{children:["El ",(0,i.jsx)(n.strong,{children:"SecurityContextHolder"})," contiene un objeto llamado ",(0,i.jsx)(n.strong,{children:"SecurityContext"}),", que a su vez guarda los detalles de la autenticaci\xf3n del usuario, como su nombre de usuario, roles y credenciales. Spring Security usa este contexto para realizar validaciones y autorizaciones."]}),(0,i.jsxs)(t,{children:[(0,i.jsx)(n.h5,{id:"qu\xe9-es-el-securitycontext",children:"\xbfQu\xe9 es el SecurityContext?"}),(0,i.jsxs)(n.p,{children:["El ",(0,i.jsx)(n.strong,{children:"SecurityContext"}),' es un componente clave en Spring Security que contiene informaci\xf3n relacionada con la autenticaci\xf3n del usuario actual. Esencialmente, es como una "caja" que guarda los detalles sobre qui\xe9n est\xe1 autenticado en el sistema en un momento dado.']}),(0,i.jsx)(n.h5,{id:"c\xf3mo-se-obtiene-el-securitycontext",children:"\xbfC\xf3mo se obtiene el SecurityContext?"}),(0,i.jsxs)(n.p,{children:["El ",(0,i.jsx)(n.strong,{children:"SecurityContext"})," se obtiene a trav\xe9s del ",(0,i.jsx)(n.strong,{children:"SecurityContextHolder"}),". Esta clase almacena y provee acceso al contexto de seguridad de forma est\xe1tica, lo que significa que puedes acceder al ",(0,i.jsx)(n.strong,{children:"SecurityContext"})," desde cualquier parte de tu aplicaci\xf3n."]})]}),(0,i.jsx)(n.h3,{id:"poblaci\xf3n-del-securitycontextholder",children:"Poblaci\xf3n del SecurityContextHolder"}),(0,i.jsxs)(n.p,{children:["Lo interesante es que Spring Security no se preocupa por c\xf3mo se llena el ",(0,i.jsx)(n.code,{children:"SecurityContextHolder"}),". Solo le importa que, si contiene un valor, este ser\xe1 tratado como el usuario autenticado."]})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)(n.h4,{id:"ejemplo-simple-de-autenticaci\xf3n-manual",children:"Ejemplo Simple de Autenticaci\xf3n Manual"}),(0,i.jsxs)(n.p,{children:["Aqu\xed tienes un ejemplo de c\xf3mo puedes autenticar manualmente a un usuario en el ",(0,i.jsx)(n.code,{children:"SecurityContextHolder"}),":"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'SecurityContext context = SecurityContextHolder.createEmptyContext(); \r\nAuthentication authentication = new TestingAuthenticationToken("username", "password", "ROLE_USER"); \r\ncontext.setAuthentication(authentication);\r\nSecurityContextHolder.setContext(context);\n'})}),(0,i.jsx)(n.h4,{id:"desglose-del-c\xf3digo",children:"Desglose del C\xf3digo"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"SecurityContext context = SecurityContextHolder.createEmptyContext();"})}),": Primero, creamos un ",(0,i.jsx)(n.code,{children:"SecurityContext"})," vac\xedo. Es importante crear uno nuevo para evitar posibles ",(0,i.jsx)(n.strong,{children:"condiciones de carrera"})," (race conditions) entre m\xfaltiples hilos (threads). Si varios hilos intentaran modificar el mismo contexto al mismo tiempo, podr\xeda haber errores o inconsistencias."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:'Authentication authentication = new TestingAuthenticationToken("username", "password", "ROLE_USER");'})}),": Luego, creamos un objeto de autenticaci\xf3n (",(0,i.jsx)(n.code,{children:"Authentication"}),"). En este caso, usamos una clase llamada ",(0,i.jsx)(n.code,{children:"TestingAuthenticationToken"})," para facilitar el ejemplo, pero en una aplicaci\xf3n real usar\xedas una implementaci\xf3n m\xe1s com\xfan como ",(0,i.jsx)(n.code,{children:"UsernamePasswordAuthenticationToken"}),", que contiene el nombre de usuario, la contrase\xf1a y los roles del usuario (permisos o authorities)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"context.setAuthentication(authentication);"})}),": Asignamos este objeto de autenticaci\xf3n al contexto de seguridad (",(0,i.jsx)(n.code,{children:"SecurityContext"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"SecurityContextHolder.setContext(context);"})}),": Finalmente, guardamos el contexto de seguridad en el ",(0,i.jsx)(n.code,{children:"SecurityContextHolder"}),", que es el que gestionar\xe1 esta informaci\xf3n a lo largo de la aplicaci\xf3n."]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)(n.h3,{id:"c\xf3mo-se-usa-el-securitycontextholder",children:"\xbfC\xf3mo se Usa el SecurityContextHolder?"}),(0,i.jsxs)(n.p,{children:["Una vez que el ",(0,i.jsx)(n.code,{children:"SecurityContextHolder"})," tiene la informaci\xf3n del usuario autenticado, puedes acceder a ella en cualquier parte de la aplicaci\xf3n. Aqu\xed te muestro c\xf3mo hacerlo:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"SecurityContext context = SecurityContextHolder.getContext();\r\nAuthentication authentication = context.getAuthentication();\r\nString username = authentication.getName();\r\nObject principal = authentication.getPrincipal();\r\nCollection<? extends GrantedAuthority> authorities = authentication.getAuthorities();\n"})}),(0,i.jsx)(n.h4,{id:"desglose-del-c\xf3digo-1",children:"Desglose del C\xf3digo"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"SecurityContext context = SecurityContextHolder.getContext();"})}),": Obtenemos el contexto de seguridad actual."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Authentication authentication = context.getAuthentication();"})}),": Obtenemos el objeto de autenticaci\xf3n, que contiene toda la informaci\xf3n del usuario."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"String username = authentication.getName();"})}),": Extraemos el nombre de usuario autenticado."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Object principal = authentication.getPrincipal();"})}),": El principal (el objeto que representa al usuario autenticado), que puede ser un objeto complejo como un ",(0,i.jsx)(n.code,{children:"UserDetails"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();"})}),": Aqu\xed obtenemos los roles o permisos del usuario, representados como una colecci\xf3n de ",(0,i.jsx)(n.code,{children:"GrantedAuthority"}),"."]}),"\n"]})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)(n.h3,{id:"d\xf3nde-se-almacena-el-securitycontext",children:"\xbfD\xf3nde se Almacena el SecurityContext?"}),(0,i.jsxs)(n.p,{children:["Por defecto, el ",(0,i.jsx)(n.code,{children:"SecurityContextHolder"})," usa un mecanismo llamado ",(0,i.jsx)(n.strong,{children:"ThreadLocal"})," para almacenar el contexto de seguridad. ",(0,i.jsx)(n.strong,{children:"ThreadLocal"})," significa que el contexto es espec\xedfico de un hilo (thread) de ejecuci\xf3n. Esto asegura que cada hilo tenga su propio ",(0,i.jsx)(n.code,{children:"SecurityContext"}),", evitando que la informaci\xf3n de un usuario se mezcle con la de otro."]}),(0,i.jsx)(n.h4,{id:"seguridad-con-threadlocal",children:"Seguridad con ThreadLocal"}),(0,i.jsxs)(n.p,{children:["Este enfoque es seguro siempre que te asegures de ",(0,i.jsx)(n.strong,{children:"limpiar el contexto"})," cuando se termine de procesar la solicitud del usuario. Spring Security lo maneja autom\xe1ticamente mediante su ",(0,i.jsx)(n.code,{children:"FilterChainProxy"}),", que se asegura de limpiar el contexto al final de cada solicitud."]}),(0,i.jsx)(n.h3,{id:"modos-de-almacenamiento-en-securitycontextholder",children:"Modos de Almacenamiento en SecurityContextHolder"}),(0,i.jsxs)(n.p,{children:["Existen diferentes modos en los que el ",(0,i.jsx)(n.code,{children:"SecurityContextHolder"})," puede almacenar el contexto de seguridad. El modo predeterminado es ",(0,i.jsx)(n.strong,{children:"MODE_THREADLOCAL"}),", pero puedes configurarlo de otras maneras seg\xfan las necesidades de tu aplicaci\xf3n."]}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"MODE_THREADLOCAL"})," (Predeterminado): Usa un ",(0,i.jsx)(n.code,{children:"ThreadLocal"})," para que cada hilo tenga su propio contexto de seguridad."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"MODE_GLOBAL"}),": Este modo es \xfatil en aplicaciones independientes (standalone), como aplicaciones de escritorio, donde todos los hilos deben compartir el mismo contexto de seguridad."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"MODE_INHERITABLETHREADLOCAL"}),": En este modo, cualquier hilo que sea generado por otro hilo hereda el contexto de seguridad del hilo principal. Esto es \xfatil si quieres que los hilos hijos tengan la misma identidad de seguridad que el hilo que los cre\xf3."]}),"\n"]}),"\n"]}),(0,i.jsxs)(t,{children:[(0,i.jsx)(n.h3,{id:"c\xf3mo-cambiar-el-modo",children:"\xbfC\xf3mo Cambiar el Modo?"}),(0,i.jsx)(n.p,{children:"Puedes cambiar el modo predeterminado de dos maneras:"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Propiedad del Sistema"}),": Puedes configurar una propiedad del sistema al iniciar la aplicaci\xf3n para cambiar el modo."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"M\xe9todo Est\xe1tico"}),": Tambi\xe9n puedes llamar a un m\xe9todo est\xe1tico en el ",(0,i.jsx)(n.code,{children:"SecurityContextHolder"})," para cambiar el modo."]}),"\n"]}),"\n"]})]})]}),"\n",(0,i.jsx)(t,{textAlign:"center",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://docs.spring.io/spring-security/reference/_images/servlet/authentication/architecture/securitycontextholder.png",alt:""})})}),"\n",(0,i.jsxs)(n.p,{children:["El ",(0,i.jsx)(n.strong,{children:"SecurityContextHolder"})," es fundamental para Spring Security, ya que es el mecanismo central que almacena y gestiona la informaci\xf3n sobre el usuario autenticado. Utiliza un enfoque flexible que se adapta a diferentes tipos de aplicaciones, ya sean web, standalone o multihilo. El uso de ",(0,i.jsx)(n.code,{children:"ThreadLocal"})," asegura que el contexto de seguridad est\xe9 aislado por hilo, pero tambi\xe9n puedes modificar el comportamiento para casos m\xe1s espec\xedficos."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var i=t(6540);const o={},a=i.createContext(o);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);