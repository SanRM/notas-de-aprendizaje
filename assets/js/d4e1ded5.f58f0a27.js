"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[3393],{5950:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>t,default:()=>l,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var o=a(4848),r=a(8453);const s={sidebar_position:8},t=void 0,p={id:"Frameworks/Angular/Input",title:"Input",description:"Comunicaci\xf3n entre Componentes con @Input en Angular",source:"@site/docs/Frameworks/Angular/Input.md",sourceDirName:"Frameworks/Angular",slug:"/Frameworks/Angular/Input",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Input",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Frameworks/Angular/Input.md",tags:[],version:"current",lastUpdatedBy:"SanRM",lastUpdatedAt:1730660085e3,sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Eventos",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Eventos"},next:{title:"Output",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Output"}},i={},d=[{value:"Comunicaci\xf3n entre Componentes con @Input en Angular",id:"comunicaci\xf3n-entre-componentes-con-input-en-angular",level:3},{value:"Paso 1: Definir una Propiedad @Input en el Componente",id:"paso-1-definir-una-propiedad-input-en-el-componente",level:4},{value:"Paso 2: Pasar un Valor a la Propiedad @Input",id:"paso-2-pasar-un-valor-a-la-propiedad-input",level:4},{value:"Paso 3: Agregar Otra Propiedad @Input",id:"paso-3-agregar-otra-propiedad-input",level:4},{value:"Paso 4: Enviar un Valor a la Nueva Propiedad @Input",id:"paso-4-enviar-un-valor-a-la-nueva-propiedad-input",level:4}];function c(e){const n={code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components},{Card:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h3,{id:"comunicaci\xf3n-entre-componentes-con-input-en-angular",children:"Comunicaci\xf3n entre Componentes con @Input en Angular"}),"\n",(0,o.jsxs)(n.p,{children:["En el desarrollo de aplicaciones, a menudo es necesario enviar datos a un componente. Esto permite personalizar el comportamiento y la presentaci\xf3n de un componente o transferir informaci\xf3n de un componente padre a uno hijo. En Angular, esto se logra utilizando el decorador ",(0,o.jsx)(n.strong,{children:"@Input"}),", que es similar a las propiedades (props) en otros frameworks."]}),"\n",(0,o.jsx)(n.p,{children:"A continuaci\xf3n, aprenderemos a utilizar el decorador @Input para enviar informaci\xf3n a los componentes."}),"\n",(0,o.jsxs)(a,{children:[(0,o.jsx)(n.h4,{id:"paso-1-definir-una-propiedad-input-en-el-componente",children:"Paso 1: Definir una Propiedad @Input en el Componente"}),(0,o.jsxs)(n.p,{children:["Para crear una propiedad ",(0,o.jsx)(n.strong,{children:"Input"}),", primero debes agregar el decorador ",(0,o.jsx)(n.code,{children:"@Input"})," a una propiedad de la clase del componente. Por ejemplo, en el archivo ",(0,o.jsx)(n.code,{children:"user.component.ts"}),", podemos definir una propiedad ",(0,o.jsx)(n.code,{children:"occupation"}),":"]}),(0,o.jsx)(a,{children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-user',\r\n  template: `<p>The user's occupation is {{ occupation }}</p>`\r\n})\r\nexport class UserComponent {\r\n    @Input() occupation = '';\r\n}\n"})})}),(0,o.jsxs)(n.p,{children:["Aqu\xed, hemos definido la propiedad ",(0,o.jsx)(n.code,{children:"occupation"})," y le hemos asignado un valor inicial de cadena vac\xeda. Esta propiedad puede recibir un valor de un componente padre."]})]}),"\n",(0,o.jsxs)(a,{children:[(0,o.jsx)(n.h4,{id:"paso-2-pasar-un-valor-a-la-propiedad-input",children:"Paso 2: Pasar un Valor a la Propiedad @Input"}),(0,o.jsxs)(n.p,{children:["Cuando est\xe1s listo para pasar un valor a trav\xe9s de un ",(0,o.jsx)(n.strong,{children:"Input"}),", puedes hacerlo en la plantilla del componente padre utilizando la sintaxis de atributos. Por ejemplo, en ",(0,o.jsx)(n.code,{children:"app.component.ts"}),", puedes enviar un valor a la propiedad ",(0,o.jsx)(n.code,{children:"occupation"})," de esta manera:"]}),(0,o.jsx)(a,{children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n  template: `<app-user occupation=\"Angular Developer\"></app-user>`\r\n})\r\nexport class AppComponent {}\r\n    \n"})})}),(0,o.jsxs)(n.p,{children:["En este caso, estamos pasando el valor ",(0,o.jsx)(n.code,{children:'"Angular Developer"'})," a la propiedad ",(0,o.jsx)(n.code,{children:"occupation"})," del componente ",(0,o.jsx)(n.code,{children:"UserComponent"}),"."]})]}),"\n",(0,o.jsxs)(a,{children:[(0,o.jsx)(n.h4,{id:"paso-3-agregar-otra-propiedad-input",children:"Paso 3: Agregar Otra Propiedad @Input"}),(0,o.jsxs)(n.p,{children:["Para continuar, definamos otra propiedad ",(0,o.jsx)(n.code,{children:"name"})," en ",(0,o.jsx)(n.code,{children:"UserComponent"}),". Actualizamos el c\xf3digo en ",(0,o.jsx)(n.code,{children:"user.component.ts"})," para incluir esta nueva propiedad y modificar el mensaje de la plantilla:"]}),(0,o.jsx)(a,{children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"@Component({\r\n    selector: 'app-user',\r\n  template: `<p>The user's name is {{ name }} and their occupation is {{ occupation }}</p>`\r\n})\r\nexport class UserComponent {\r\n    @Input() occupation = '';\r\n  @Input() name = '';\r\n}\n"})})}),(0,o.jsx)(n.p,{children:"Ahora, tambi\xe9n estamos listos para enviar un nombre al componente."})]}),"\n",(0,o.jsxs)(a,{children:[(0,o.jsx)(n.h4,{id:"paso-4-enviar-un-valor-a-la-nueva-propiedad-input",children:"Paso 4: Enviar un Valor a la Nueva Propiedad @Input"}),(0,o.jsxs)(n.p,{children:["Ahora actualizaremos ",(0,o.jsx)(n.code,{children:"app.component.ts"})," para pasar un valor a la nueva propiedad ",(0,o.jsx)(n.code,{children:"name"})," con el valor ",(0,o.jsx)(n.code,{children:'"Simran"'}),":"]}),(0,o.jsx)(a,{children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"@Component({\r\n    selector: 'app-root',\r\n  template: `<app-user occupation=\"Angular Developer\" [name]=\"'Simran'\"></app-user>`\r\n})\r\nexport class AppComponent {}\n"})})}),(0,o.jsxs)(n.p,{children:["Aqu\xed, estamos utilizando la sintaxis de enlace de propiedades para asignar el valor de ",(0,o.jsx)(n.code,{children:"name"}),". Al envolver el valor en comillas simples, estamos pasando una cadena de texto, lo que permite que el valor sea interpretado correctamente."]})]}),"\n",(0,o.jsxs)(n.p,{children:["Al implementar el decorador ",(0,o.jsx)(n.strong,{children:"@Input"}),", hemos logrado que el componente ",(0,o.jsx)(n.code,{children:"UserComponent"})," reciba datos del componente padre ",(0,o.jsx)(n.code,{children:"AppComponent"}),". Gracias a esto, ahora se puede mostrar din\xe1micamente el nombre y la ocupaci\xf3n de un usuario en la interfaz."]}),"\n",(0,o.jsx)(n.p,{children:"Este enfoque de comunicaci\xf3n entre componentes es fundamental en Angular y nos permite construir aplicaciones m\xe1s modulares y reutilizables. En la pr\xf3xima lecci\xf3n, exploraremos c\xf3mo enviar informaci\xf3n desde un componente hijo a un componente padre, completando as\xed el ciclo de comunicaci\xf3n entre componentes."})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>p});var o=a(6540);const r={},s=o.createContext(r);function t(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);