"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[6217],{3089:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>t});var a=c(4848),r=c(8453);const s={sidebar_position:20},i=void 0,o={id:"Frameworks/Angular/Inyecci\xf3n de dependencias/Inyecci\xf3n de dependencias basada en contructor",title:"Inyecci\xf3n de dependencias basada en contructor",description:"Inyecci\xf3n de Dependencias Basada en el Constructor en Angular",source:"@site/docs/Frameworks/Angular/Inyecci\xf3n de dependencias/Inyecci\xf3n de dependencias basada en contructor.md",sourceDirName:"Frameworks/Angular/Inyecci\xf3n de dependencias",slug:"/Frameworks/Angular/Inyecci\xf3n de dependencias/Inyecci\xf3n de dependencias basada en contructor",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Inyecci\xf3n de dependencias/Inyecci\xf3n de dependencias basada en contructor",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Frameworks/Angular/Inyecci\xf3n de dependencias/Inyecci\xf3n de dependencias basada en contructor.md",tags:[],version:"current",lastUpdatedBy:"SanRM",lastUpdatedAt:1730660085e3,sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Inserci\xf3n de dependencias basada en inyecci\xf3n",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Inyecci\xf3n de dependencias/Inserci\xf3n de dependencias basada en inyecci\xf3n"},next:{title:"Lenguajes de programaci\xf3n",permalink:"/notas-de-aprendizaje/docs/category/lenguajes-de-programaci\xf3n"}},d={},t=[{value:"Inyecci\xf3n de Dependencias Basada en el Constructor en Angular",id:"inyecci\xf3n-de-dependencias-basada-en-el-constructor-en-angular",level:3},{value:"\xbfQu\xe9 es la Inyecci\xf3n Basada en el Constructor?",id:"qu\xe9-es-la-inyecci\xf3n-basada-en-el-constructor",level:3},{value:"Ejemplo de Inyecci\xf3n en el Constructor",id:"ejemplo-de-inyecci\xf3n-en-el-constructor",level:4},{value:"Puntos Clave en la Inyecci\xf3n Basada en el Constructor",id:"puntos-clave-en-la-inyecci\xf3n-basada-en-el-constructor",level:3},{value:"Ejercicio Pr\xe1ctico: Inyectar un Servicio en el Constructor de un Componente",id:"ejercicio-pr\xe1ctico-inyectar-un-servicio-en-el-constructor-de-un-componente",level:3},{value:"Explicaci\xf3n:",id:"explicaci\xf3n",level:4}];function l(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Card:c}=n;return c||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h3,{id:"inyecci\xf3n-de-dependencias-basada-en-el-constructor-en-angular",children:"Inyecci\xf3n de Dependencias Basada en el Constructor en Angular"}),"\n",(0,a.jsxs)(n.p,{children:["En Angular, existen dos patrones comunes para inyectar dependencias: el uso de la funci\xf3n ",(0,a.jsx)(n.code,{children:"inject()"})," y la inyecci\xf3n basada en el constructor."]}),"\n",(0,a.jsxs)(n.p,{children:["En este ejemplo, vamos a enfocarnos en la ",(0,a.jsx)(n.strong,{children:"Inyecci\xf3n de Dependencias basada en el Constructor"}),"."]}),"\n",(0,a.jsxs)(c,{children:[(0,a.jsx)(n.h3,{id:"qu\xe9-es-la-inyecci\xf3n-basada-en-el-constructor",children:"\xbfQu\xe9 es la Inyecci\xf3n Basada en el Constructor?"}),(0,a.jsx)(n.p,{children:"La inyecci\xf3n basada en el constructor consiste en declarar los recursos o servicios que necesitamos como par\xe1metros en el constructor de una clase de componente. Angular se encarga de inyectar autom\xe1ticamente estos recursos cuando el componente se crea, permitiendo que el servicio est\xe9 disponible como una propiedad de la clase."})]}),"\n",(0,a.jsxs)(c,{children:[(0,a.jsx)(n.h4,{id:"ejemplo-de-inyecci\xf3n-en-el-constructor",children:"Ejemplo de Inyecci\xf3n en el Constructor"}),(0,a.jsxs)(n.p,{children:["Supongamos que queremos inyectar un servicio llamado ",(0,a.jsx)(n.code,{children:"PetCareService"})," en nuestro componente ",(0,a.jsx)(n.code,{children:"PetCarDashboardComponent"}),". Este es el c\xf3digo que utilizar\xedamos:"]}),(0,a.jsx)(c,{children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"@Component({...})\r\nclass PetCarDashboardComponent {\r\n    constructor(private petCareService: PetCareService) {\r\n        // Ahora, petCareService est\xe1 disponible en toda la clase.\r\n    }\r\n}\n"})})}),(0,a.jsxs)(c,{children:[(0,a.jsx)(n.h3,{id:"puntos-clave-en-la-inyecci\xf3n-basada-en-el-constructor",children:"Puntos Clave en la Inyecci\xf3n Basada en el Constructor"}),(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:["Uso de ",(0,a.jsx)(n.code,{children:"private"})]}),": Declaramos el servicio con el modificador ",(0,a.jsx)(n.code,{children:"private"})," para que se convierta en una propiedad accesible de la clase."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Creaci\xf3n Autom\xe1tica de Propiedades"}),": Al inyectar el servicio, Angular lo asigna autom\xe1ticamente como una propiedad de la clase. Esto permite usarlo sin necesidad de declararlo fuera del constructor."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Clase de Servicio Inyectado"}),": Aqu\xed ",(0,a.jsx)(n.code,{children:"PetCareService"}),' es el recurso o clase que estamos inyectando. Angular debe estar configurado para "proveer" este servicio, lo que generalmente se hace en el m\xf3dulo principal o en la configuraci\xf3n de proveedores del servicio.']}),"\n"]})]})]}),"\n",(0,a.jsxs)(c,{children:[(0,a.jsx)(n.h3,{id:"ejercicio-pr\xe1ctico-inyectar-un-servicio-en-el-constructor-de-un-componente",children:"Ejercicio Pr\xe1ctico: Inyectar un Servicio en el Constructor de un Componente"}),(0,a.jsxs)(n.p,{children:["Ahora, actualicemos el c\xf3digo del constructor en un componente llamado ",(0,a.jsx)(n.code,{children:"AppComponent"})," para usar la inyecci\xf3n de dependencias basada en el constructor. En este caso, inyectaremos un servicio llamado ",(0,a.jsx)(n.code,{children:"CarService"})," y lo usaremos para obtener una lista de autos."]}),(0,a.jsx)(c,{children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"@Component({...})\r\nclass AppComponent {\r\n    display: string;\r\n\r\n    constructor(private carService: CarService) {\r\n        this.display = this.carService.getCars().join(' \u2b50\ufe0f ');\r\n    }\r\n}\n"})})}),(0,a.jsx)(n.h4,{id:"explicaci\xf3n",children:"Explicaci\xf3n:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Declaraci\xf3n del Servicio"}),": Al usar ",(0,a.jsx)(n.code,{children:"private carService: CarService"})," en el constructor, ",(0,a.jsx)(n.code,{children:"carService"})," se convierte en una propiedad de ",(0,a.jsx)(n.code,{children:"AppComponent"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Uso del Servicio"}),": ",(0,a.jsx)(n.code,{children:"carService.getCars()"})," obtiene una lista de autos, que luego se convierte en un string separado por ",(0,a.jsx)(n.code,{children:"\u2b50\ufe0f"})," y se asigna a ",(0,a.jsx)(n.code,{children:"display"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:["Disponibilidad de la Propiedad ",(0,a.jsx)(n.code,{children:"display"})]}),": Ahora, ",(0,a.jsx)(n.code,{children:"display"})," est\xe1 listo para mostrarse en la plantilla del componente, proporcionando una vista din\xe1mica basada en los datos del servicio."]}),"\n"]})]}),"\n",(0,a.jsxs)(n.p,{children:["La inyecci\xf3n de dependencias basada en el constructor es un patr\xf3n com\xfan en Angular, y funciona de manera similar al uso de ",(0,a.jsx)(n.code,{children:"inject()"}),", pero es especialmente \xfatil para servicios de uso constante en la clase. Este enfoque promueve la modularidad, hace el c\xf3digo m\xe1s f\xe1cil de probar y mantiene la l\xf3gica del componente limpia."]}),"\n",(0,a.jsxs)(n.p,{children:["Para profundizar m\xe1s sobre este tema, puedes consultar la ",(0,a.jsx)(n.a,{href:"https://angular.io/guide/dependency-injection",children:"documentaci\xf3n de Angular sobre inyecci\xf3n de dependencias"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,c)=>{c.d(n,{R:()=>i,x:()=>o});var a=c(6540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);