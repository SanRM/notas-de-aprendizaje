"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[3919],{9222:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var i=a(4848),t=a(8453);const r={sidebar_position:3},c=void 0,o={id:"Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/AuthenticationManager",title:"AuthenticationManager",description:"\xbfQu\xe9 es AuthenticationManager?",source:"@site/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/AuthenticationManager.md",sourceDirName:"Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n",slug:"/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/AuthenticationManager",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/AuthenticationManager",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/AuthenticationManager.md",tags:[],version:"current",lastUpdatedBy:"SanRM",lastUpdatedAt:1729228641e3,sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Interfaz Authentication",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/Interfaz Authentication"},next:{title:"GrantedAuthority",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/GrantedAuthority"}},s={},u=[{value:"\xbfQu\xe9 es AuthenticationManager?",id:"qu\xe9-es-authenticationmanager",level:3},{value:"Funci\xf3n de AuthenticationManager en el Proceso de Autenticaci\xf3n",id:"funci\xf3n-de-authenticationmanager-en-el-proceso-de-autenticaci\xf3n",level:3},{value:"\xbfQu\xe9 pasa si no usas los Filtros de Spring Security?",id:"qu\xe9-pasa-si-no-usas-los-filtros-de-spring-security",level:3},{value:"Resumen",id:"resumen",level:3}];function d(e){const n={code:"code",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Card:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"qu\xe9-es-authenticationmanager",children:"\xbfQu\xe9 es AuthenticationManager?"}),"\n",(0,i.jsxs)(n.p,{children:["El ",(0,i.jsx)(n.strong,{children:"AuthenticationManager"})," es una API clave en Spring Security que define c\xf3mo los filtros de seguridad realizan la autenticaci\xf3n de los usuarios. En pocas palabras, este componente es responsable de verificar las credenciales de un usuario y devolver un objeto de ",(0,i.jsx)(n.strong,{children:"Authentication"})," si la autenticaci\xf3n es exitosa."]}),"\n",(0,i.jsxs)(a,{children:[(0,i.jsx)(n.h3,{id:"funci\xf3n-de-authenticationmanager-en-el-proceso-de-autenticaci\xf3n",children:"Funci\xf3n de AuthenticationManager en el Proceso de Autenticaci\xf3n"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Autenticaci\xf3n con Filtros de Spring Security"}),": Los filtros de Spring Security (por ejemplo, el ",(0,i.jsx)(n.code,{children:"UsernamePasswordAuthenticationFilter"})," para manejar inicios de sesi\xf3n con usuario y contrase\xf1a) invocan el ",(0,i.jsx)(n.code,{children:"AuthenticationManager"})," para autenticar al usuario. Este proceso t\xedpicamente incluye verificar que las credenciales (como el nombre de usuario y la contrase\xf1a) sean correctas."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Objeto Authentication"}),": Si la autenticaci\xf3n es exitosa, el ",(0,i.jsx)(n.code,{children:"AuthenticationManager"})," devuelve un objeto ",(0,i.jsx)(n.strong,{children:"Authentication"}),". Este objeto contiene informaci\xf3n sobre el usuario autenticado, como su nombre de usuario, roles y detalles adicionales de seguridad."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"SecurityContextHolder"}),": Una vez que el ",(0,i.jsx)(n.code,{children:"AuthenticationManager"})," valida las credenciales y devuelve el objeto ",(0,i.jsx)(n.code,{children:"Authentication"}),", Spring Security guarda este objeto en el ",(0,i.jsx)(n.strong,{children:"SecurityContextHolder"}),'. Este contexto se utiliza a lo largo de la aplicaci\xf3n para saber qui\xe9n est\xe1 autenticado y qu\xe9 permisos tiene. Es como un "almac\xe9n" temporal de la autenticaci\xf3n en la sesi\xf3n del usuario.']}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(a,{children:[(0,i.jsx)(n.h3,{id:"qu\xe9-pasa-si-no-usas-los-filtros-de-spring-security",children:"\xbfQu\xe9 pasa si no usas los Filtros de Spring Security?"}),(0,i.jsxs)(n.p,{children:["Si no est\xe1s utilizando los filtros de Spring Security para manejar la autenticaci\xf3n (quiz\xe1 porque tienes una l\xf3gica de autenticaci\xf3n personalizada o externa), no est\xe1s obligado a usar un ",(0,i.jsx)(n.code,{children:"AuthenticationManager"}),". En este caso, puedes establecer el ",(0,i.jsx)(n.code,{children:"SecurityContextHolder"})," directamente con un objeto ",(0,i.jsx)(n.code,{children:"Authentication"})," de tu elecci\xf3n, aunque usar el ",(0,i.jsx)(n.code,{children:"AuthenticationManager"})," sigue siendo recomendable por la estructura y seguridad que ofrece."]})]}),"\n",(0,i.jsx)(n.h3,{id:"resumen",children:"Resumen"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AuthenticationManager"}),": Es el componente central que maneja la autenticaci\xf3n en Spring Security. Se encarga de verificar si las credenciales proporcionadas por el usuario son correctas y devuelve un objeto ",(0,i.jsx)(n.code,{children:"Authentication"})," si la autenticaci\xf3n es exitosa."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ProviderManager"}),": La implementaci\xf3n m\xe1s com\xfan de ",(0,i.jsx)(n.code,{children:"AuthenticationManager"}),", que delega la autenticaci\xf3n a varios ",(0,i.jsx)(n.code,{children:"AuthenticationProviders"}),", cada uno especializado en un tipo de autenticaci\xf3n."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SecurityContextHolder"}),": Guarda el objeto ",(0,i.jsx)(n.code,{children:"Authentication"})," para que la aplicaci\xf3n sepa qui\xe9n est\xe1 autenticado en cualquier momento."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Con este sistema, Spring Security ofrece una arquitectura flexible y potente para manejar diferentes tipos de autenticaci\xf3n en aplicaciones web, facilitando la integraci\xf3n con diversas fuentes de credenciales, ya sea una base de datos, tokens, o servicios externos."})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>o});var i=a(6540);const t={},r=i.createContext(t);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);