"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[2585],{4186:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>c,toc:()=>d});var a=i(4848),r=i(8453);const t={sidebar_position:5},s=void 0,c={id:"Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/ProviderManager",title:"ProviderManager",description:"ProviderManager es una implementaci\xf3n del AuthenticationManager, que es el componente responsable de gestionar la autenticaci\xf3n en Spring Security. Sin embargo, en lugar de manejar directamente la autenticaci\xf3n, ProviderManager delega este trabajo a una lista de instancias de AuthenticationProvider.",source:"@site/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/ProviderManager.md",sourceDirName:"Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n",slug:"/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/ProviderManager",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/ProviderManager",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/ProviderManager.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"GrantedAuthority",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/GrantedAuthority"},next:{title:"AuthenticationProvider",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/AuthenticationProvider"}},o={},d=[{value:"\xbfC\xf3mo Funciona la Delegaci\xf3n en ProviderManager?",id:"c\xf3mo-funciona-la-delegaci\xf3n-en-providermanager",level:3},{value:"\xbfQu\xe9 Pasa si Ning\xfan AuthenticationProvider Puede Autenticar?",id:"qu\xe9-pasa-si-ning\xfan-authenticationprovider-puede-autenticar",level:3},{value:"Ejemplo de Uso: M\xfaltiples ProviderManagers con un AuthenticationManager Padre",id:"ejemplo-de-uso-m\xfaltiples-providermanagers-con-un-authenticationmanager-padre",level:3},{value:"Seguridad y Sensibilidad de Credenciales",id:"seguridad-y-sensibilidad-de-credenciales",level:3},{value:"Soluciones a Este Problema",id:"soluciones-a-este-problema",level:3}];function l(e){const n={code:"code",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Card:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"ProviderManager"})," es una implementaci\xf3n del ",(0,a.jsx)(n.strong,{children:"AuthenticationManager"}),", que es el componente responsable de gestionar la autenticaci\xf3n en Spring Security. Sin embargo, en lugar de manejar directamente la autenticaci\xf3n, ",(0,a.jsx)(n.strong,{children:"ProviderManager"})," delega este trabajo a una lista de instancias de ",(0,a.jsx)(n.strong,{children:"AuthenticationProvider"}),"."]}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsxs)(n.p,{children:["Cada ",(0,a.jsx)(n.strong,{children:"AuthenticationProvider"})," tiene la oportunidad de decidir si la autenticaci\xf3n debe:"]}),(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Ser exitosa"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Fallar"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Pasar la decisi\xf3n a otro AuthenticationProvider"})," en la lista."]}),"\n"]})]}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsxs)(n.p,{children:["Si ninguno de los ",(0,a.jsx)(n.strong,{children:"AuthenticationProvider"})," configurados puede autenticar correctamente, la autenticaci\xf3n falla con una excepci\xf3n llamada ",(0,a.jsx)(n.strong,{children:"ProviderNotFoundException"}),". Esta es una excepci\xf3n especial que indica que el ",(0,a.jsx)(n.strong,{children:"ProviderManager"})," no fue configurado para soportar el tipo de autenticaci\xf3n que se le pas\xf3."]}),(0,a.jsx)(i,{textAlign:"center",children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://docs.spring.io/spring-security/reference/_images/servlet/authentication/architecture/providermanager.png",alt:""})})})]}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsx)(n.h3,{id:"c\xf3mo-funciona-la-delegaci\xf3n-en-providermanager",children:"\xbfC\xf3mo Funciona la Delegaci\xf3n en ProviderManager?"}),(0,a.jsxs)(n.p,{children:["Cada ",(0,a.jsx)(n.strong,{children:"AuthenticationProvider"})," en la lista sabe c\xf3mo realizar un tipo espec\xedfico de autenticaci\xf3n. Por ejemplo:"]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Un ",(0,a.jsx)(n.strong,{children:"AuthenticationProvider"})," puede validar una combinaci\xf3n de nombre de usuario y contrase\xf1a."]}),"\n",(0,a.jsxs)(n.li,{children:["Otro ",(0,a.jsx)(n.strong,{children:"AuthenticationProvider"})," puede autenticar usando una afirmaci\xf3n SAML (un protocolo de autenticaci\xf3n)."]}),"\n"]}),(0,a.jsxs)(n.p,{children:["Esto permite que cada ",(0,a.jsx)(n.strong,{children:"AuthenticationProvider"})," se encargue de un tipo espec\xedfico de autenticaci\xf3n, pero todos los tipos est\xe1n gestionados por un \xfanico ",(0,a.jsx)(n.strong,{children:"AuthenticationManager"}),", lo que simplifica la configuraci\xf3n y el manejo de la seguridad en la aplicaci\xf3n."]})]}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsx)(n.h3,{id:"qu\xe9-pasa-si-ning\xfan-authenticationprovider-puede-autenticar",children:"\xbfQu\xe9 Pasa si Ning\xfan AuthenticationProvider Puede Autenticar?"}),(0,a.jsxs)(n.p,{children:["En estos casos, ",(0,a.jsx)(n.strong,{children:"ProviderManager"})," puede tener configurado un ",(0,a.jsx)(n.strong,{children:"AuthenticationManager padre"})," (parent AuthenticationManager), que es consultado si ninguno de los ",(0,a.jsx)(n.strong,{children:"AuthenticationProvider"})," configurados puede autenticar correctamente."]}),(0,a.jsxs)(n.p,{children:["El ",(0,a.jsx)(n.strong,{children:"AuthenticationManager padre"})," puede ser cualquier tipo de ",(0,a.jsx)(n.strong,{children:"AuthenticationManager"}),", pero generalmente es otra instancia de ",(0,a.jsx)(n.strong,{children:"ProviderManager"}),". Este mecanismo es \xfatil cuando tienes m\xfaltiples ",(0,a.jsx)(n.strong,{children:"ProviderManager"})," que comparten un mismo ",(0,a.jsx)(n.strong,{children:"AuthenticationManager padre"}),"."]}),(0,a.jsx)(i,{textAlign:"center",children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://docs.spring.io/spring-security/reference/_images/servlet/authentication/architecture/providermanager-parent.png",alt:""})})})]}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsx)(n.h3,{id:"ejemplo-de-uso-m\xfaltiples-providermanagers-con-un-authenticationmanager-padre",children:"Ejemplo de Uso: M\xfaltiples ProviderManagers con un AuthenticationManager Padre"}),(0,a.jsxs)(n.p,{children:["Es com\xfan tener varios ",(0,a.jsx)(n.strong,{children:"ProviderManager"})," que compartan un ",(0,a.jsx)(n.strong,{children:"AuthenticationManager padre"}),". Este tipo de configuraci\xf3n es com\xfan en escenarios donde tienes m\xfaltiples ",(0,a.jsx)(n.strong,{children:"SecurityFilterChain"}),", cada una con diferentes mecanismos de autenticaci\xf3n (por ejemplo, diferentes flujos de login), pero con algunos elementos de autenticaci\xf3n en com\xfan, manejados por el ",(0,a.jsx)(n.strong,{children:"AuthenticationManager padre"}),"."]}),(0,a.jsx)(i,{textAlign:"center",children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://docs.spring.io/spring-security/reference/_images/servlet/authentication/architecture/providermanagers-parent.png",alt:""})})})]}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsx)(n.h3,{id:"seguridad-y-sensibilidad-de-credenciales",children:"Seguridad y Sensibilidad de Credenciales"}),(0,a.jsxs)(n.p,{children:["Por defecto, ",(0,a.jsx)(n.strong,{children:"ProviderManager"})," intenta borrar cualquier informaci\xf3n sensible de credenciales (como contrase\xf1as) despu\xe9s de una autenticaci\xf3n exitosa. Esto es para evitar que la informaci\xf3n sensible permanezca en la sesi\xf3n HTTP m\xe1s tiempo del necesario."]}),(0,a.jsxs)(n.p,{children:["Sin embargo, esto puede causar problemas si usas un cach\xe9 de objetos de usuario para mejorar el rendimiento en aplicaciones sin estado. Si el objeto de autenticaci\xf3n (como una instancia de ",(0,a.jsx)(n.strong,{children:"UserDetails"}),") tiene sus credenciales eliminadas, no ser\xe1 posible autenticar utilizando el valor en cach\xe9."]}),(0,a.jsxs)(i,{children:[(0,a.jsx)(n.h3,{id:"soluciones-a-este-problema",children:"Soluciones a Este Problema"}),(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Hacer una copia del objeto"}),": Una soluci\xf3n obvia es hacer una copia del objeto antes de eliminar las credenciales. Esto se puede hacer tanto en la implementaci\xf3n del cach\xe9 como en el ",(0,a.jsx)(n.strong,{children:"AuthenticationProvider"})," que crea el objeto de autenticaci\xf3n."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsxs)(n.strong,{children:["Deshabilitar la propiedad ",(0,a.jsx)(n.code,{children:"eraseCredentialsAfterAuthentication"})]}),": Otra soluci\xf3n es desactivar esta propiedad en ",(0,a.jsx)(n.strong,{children:"ProviderManager"}),", para que no borre las credenciales despu\xe9s de la autenticaci\xf3n."]}),"\n"]}),"\n"]})]})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"ProviderManager"})," es una herramienta poderosa en Spring Security para gestionar m\xfaltiples mecanismos de autenticaci\xf3n de una manera flexible. Al delegar el trabajo a diferentes ",(0,a.jsx)(n.strong,{children:"AuthenticationProviders"}),", puedes manejar una variedad de m\xe9todos de autenticaci\xf3n dentro de una sola aplicaci\xf3n. Adem\xe1s, al configurar un ",(0,a.jsx)(n.strong,{children:"AuthenticationManager padre"}),", puedes compartir l\xf3gica de autenticaci\xf3n com\xfan entre diferentes cadenas de seguridad (SecurityFilterChain)."]}),"\n",(0,a.jsx)(n.p,{children:"Este enfoque modular permite que las aplicaciones sean m\xe1s flexibles y f\xe1ciles de mantener. Si necesitas optimizar el rendimiento utilizando un cach\xe9, solo debes tener cuidado con la eliminaci\xf3n de credenciales sensibles y ajustar la configuraci\xf3n seg\xfan sea necesario."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var a=i(6540);const r={},t=a.createContext(r);function s(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);