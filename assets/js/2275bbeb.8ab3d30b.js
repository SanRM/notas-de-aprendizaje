"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[2118],{7716:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});var s=a(4848),r=a(8453);const i={title:"Relaciones entre entidades"},o=void 0,t={id:"Lenguajes de programaci\xf3n/Java/Spring Boot/JPA/Relaciones entre entidades",title:"Relaciones entre entidades",description:"Definici\xf3n",source:"@site/docs/Lenguajes de programaci\xf3n/Java/Spring Boot/JPA/Relaciones entre entidades.md",sourceDirName:"Lenguajes de programaci\xf3n/Java/Spring Boot/JPA",slug:"/Lenguajes de programaci\xf3n/Java/Spring Boot/JPA/Relaciones entre entidades",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring Boot/JPA/Relaciones entre entidades",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Lenguajes de programaci\xf3n/Java/Spring Boot/JPA/Relaciones entre entidades.md",tags:[],version:"current",lastUpdatedBy:"SanRM",lastUpdatedAt:1722011095e3,frontMatter:{title:"Relaciones entre entidades"},sidebar:"tutorialSidebar",previous:{title:"Mapeo de entidades",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring Boot/JPA/Mapeo de entidades"},next:{title:"Metodolog\xedas de desarrollo de software",permalink:"/notas-de-aprendizaje/docs/category/metodolog\xedas-de-desarrollo-de-software"}},d={},c=[{value:"Definici\xf3n",id:"definici\xf3n",level:2},{value:"Uno a Uno (@OneToOne)",id:"uno-a-uno-onetoone",level:2},{value:"Uno a Muchos (@OneToMany)",id:"uno-a-muchos-onetomany",level:2},{value:"Muchos a Uno (@ManyToOne)",id:"muchos-a-uno-manytoone",level:2},{value:"Muchos a Muchos (@ManyToMany)",id:"muchos-a-muchos-manytomany",level:2},{value:"Propiedades de las relaciones",id:"propiedades-de-las-relaciones",level:2},{value:"Cascada <strong>(CascadeType)</strong>",id:"cascada-cascadetype",level:3},{value:"Persist",id:"persist",level:4},{value:"Merge",id:"merge",level:4},{value:"Remove",id:"remove",level:4},{value:"Refresh",id:"refresh",level:4},{value:"Detach",id:"detach",level:4},{value:"Fetch Type <strong>(FetchType)</strong>",id:"fetch-type-fetchtype",level:3},{value:"Eager",id:"eager",level:4},{value:"Lazy",id:"lazy",level:4}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Card:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"definici\xf3n",children:"Definici\xf3n"}),"\n",(0,s.jsx)(n.p,{children:"En JPA, las relaciones entre entidades son una forma de definir c\xf3mo los objetos de una entidad se asocian con objetos de otras entidades. Las principales relaciones entre entidades son:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsxs)(n.a,{href:"#relaci%C3%B3n-uno-a-uno-onetoone",children:["Uno a Uno ",(0,s.jsx)(n.strong,{children:"(@OneToOne)"})]})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsxs)(n.a,{href:"#relaciones-uno-a-muchos-onetomany",children:["Uno a Muchos ",(0,s.jsx)(n.strong,{children:"(@OneToMany)"})]})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsxs)(n.a,{href:"#relaciones-muchos-a-uno-manytoone",children:["Muchos a Uno ",(0,s.jsx)(n.strong,{children:"(@ManyToOne)"})]})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsxs)(n.a,{href:"#relaciones-muchos-a-muchos-manytomany",children:["Muchos a Muchos ",(0,s.jsx)(n.strong,{children:"(@ManyToMany)"})]})}),"\n"]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h2,{id:"uno-a-uno-onetoone",children:"Uno a Uno (@OneToOne)"}),(0,s.jsx)(n.p,{children:"Una relaci\xf3n uno a uno en JPA significa que un registro en una tabla est\xe1 asociado con un \xfanico registro en otra tabla."}),(0,s.jsxs)(n.p,{children:["Por ejemplo, una entidad ",(0,s.jsx)(n.strong,{children:"User"})," puede tener una relaci\xf3n uno a uno con una entidad ",(0,s.jsx)(n.strong,{children:"Profile"}),"."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Entity\r\npublic class User {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    \r\n    @OneToOne\r\n    @JoinColumn(name = "profile_id")\r\n    private Profile profile;\r\n\r\n    // Getters y Setters\r\n}\r\n\r\n@Entity\r\npublic class Profile {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    \r\n    @OneToOne(mappedBy = "profile")\r\n    private User user;\r\n\r\n    // Getters y Setters\r\n}\n'})})]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h2,{id:"uno-a-muchos-onetomany",children:"Uno a Muchos (@OneToMany)"}),(0,s.jsx)(n.p,{children:"Una relaci\xf3n uno a muchos significa que un registro en una tabla puede estar asociado con m\xfaltiples registros en otra tabla."}),(0,s.jsx)(n.p,{children:"Por ejemplo, una entidad Department puede tener una relaci\xf3n uno a muchos con una entidad Employee."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Entity\r\npublic class Department {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    \r\n    @OneToMany(mappedBy = "department")\r\n    private List<Employee> employees;\r\n\r\n    // Getters y Setters\r\n}\r\n\r\n@Entity\r\npublic class Employee {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    \r\n    @ManyToOne\r\n    @JoinColumn(name = "department_id")\r\n    private Department department;\r\n\r\n    // Getters y Setters\r\n}\n'})})]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h2,{id:"muchos-a-uno-manytoone",children:"Muchos a Uno (@ManyToOne)"}),(0,s.jsx)(n.p,{children:"Una relaci\xf3n muchos a uno significa que muchos registros en una tabla pueden estar asociados con un \xfanico registro en otra tabla. Esta relaci\xf3n es la inversa de la relaci\xf3n uno a muchos y se suele usar junto a ella. Por ejemplo, m\xfaltiples Employee pueden estar asociados con un \xfanico Department."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Entity\r\npublic class Employee {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    \r\n    @ManyToOne\r\n    @JoinColumn(name = "department_id")\r\n    private Department department;\r\n\r\n    // Getters y Setters\r\n}\n'})})]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h2,{id:"muchos-a-muchos-manytomany",children:"Muchos a Muchos (@ManyToMany)"}),(0,s.jsx)(n.p,{children:"Una relaci\xf3n muchos a muchos significa que muchos registros en una tabla pueden estar asociados con muchos registros en otra tabla. Por ejemplo, una entidad Student puede tener una relaci\xf3n muchos a muchos con una entidad Course."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Entity\r\npublic class Student {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    \r\n    @ManyToMany\r\n    @JoinTable(\r\n        name = "student_course",\r\n        joinColumns = @JoinColumn(name = "student_id"),\r\n        inverseJoinColumns = @JoinColumn(name = "course_id")\r\n    )\r\n    private List<Course> courses;\r\n\r\n    // Getters y Setters\r\n}\r\n\r\n@Entity\r\npublic class Course {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    \r\n    @ManyToMany(mappedBy = "courses")\r\n    private List<Student> students;\r\n\r\n    // Getters y Setters\r\n}\n'})})]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h2,{id:"propiedades-de-las-relaciones",children:"Propiedades de las relaciones"}),(0,s.jsxs)(a,{color:"cyan",children:[(0,s.jsxs)(n.h3,{id:"cascada-cascadetype",children:["Cascada ",(0,s.jsx)(n.strong,{children:"(CascadeType)"})]}),(0,s.jsx)(n.p,{children:"La propiedad de cascada define c\xf3mo las operaciones en una entidad afectan a las entidades relacionadas, esto es \xfatil para simplificar la gesti\xf3n de entidades relacionadas."}),(0,s.jsx)(n.p,{children:"Las opciones de cascada m\xe1s comunes son:"}),(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h4,{id:"persist",children:"Persist"}),(0,s.jsx)(n.p,{children:"Si una entidad es persistida, sus entidades relacionadas tambi\xe9n ser\xe1n persistidas autom\xe1ticamente."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplo"})}),(0,s.jsxs)(n.p,{children:["Si se guarda un ",(0,s.jsx)(n.strong,{children:"Department"}),", todos los ",(0,s.jsx)(n.strong,{children:"Employee"})," asociados a ese ",(0,s.jsx)(n.strong,{children:"Department"})," tambi\xe9n se guardar\xe1n autom\xe1ticamente."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@OneToMany(cascade = CascadeType.PERSIST)\r\nprivate List<Employee> employees;\n"})})]}),(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h4,{id:"merge",children:"Merge"}),(0,s.jsx)(n.p,{children:"Si una entidad es fusionada, sus entidades relacionadas tambi\xe9n ser\xe1n fusionadas autom\xe1ticamente, es decir, si se actualiza una entidad, sus entidades relacionadas tambi\xe9n se actualizar\xe1n."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplo"})}),(0,s.jsxs)(n.p,{children:["Si se actualiza un ",(0,s.jsx)(n.strong,{children:"Department"}),", todos los ",(0,s.jsx)(n.strong,{children:"Employee"})," asociados a ese ",(0,s.jsx)(n.strong,{children:"Department"})," tambi\xe9n se actualizar\xe1n autom\xe1ticamente."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@OneToMany(cascade = CascadeType.MERGE)\r\nprivate List<Employee> employees;\n"})})]}),(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h4,{id:"remove",children:"Remove"}),(0,s.jsx)(n.p,{children:"Si una entidad es eliminada, sus entidades relacionadas tambi\xe9n ser\xe1n eliminadas autom\xe1ticamente."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplo"})}),(0,s.jsxs)(n.p,{children:["Si se elimina un ",(0,s.jsx)(n.strong,{children:"Department"}),", todos los ",(0,s.jsx)(n.strong,{children:"Employee"})," asociados a ese ",(0,s.jsx)(n.strong,{children:"Department"})," tambi\xe9n se eliminar\xe1n autom\xe1ticamente."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@OneToMany(cascade = CascadeType.REMOVE)\r\nprivate List<Employee> employees;\n"})})]}),(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h4,{id:"refresh",children:"Refresh"}),(0,s.jsx)(n.p,{children:"Si una entidad es refrescada, sus entidades relacionadas tambi\xe9n ser\xe1n refrescadas autom\xe1ticamente."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplo"})}),(0,s.jsxs)(n.p,{children:["Si se refresca un ",(0,s.jsx)(n.strong,{children:"Department"}),", todos los Employee asociados a ese ",(0,s.jsx)(n.strong,{children:"Department"})," tambi\xe9n se refrescar\xe1n autom\xe1ticamente."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@OneToMany(cascade = CascadeType.REFRESH)\r\nprivate List<Employee> employees;\n"})})]}),(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h4,{id:"detach",children:"Detach"}),(0,s.jsx)(n.p,{children:"Si una entidad es desvinculada del contexto de persistencia, sus entidades relacionadas tambi\xe9n ser\xe1n desvinculadas."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplo"})}),(0,s.jsxs)(n.p,{children:["Si se desvincula un ",(0,s.jsx)(n.strong,{children:"Department"})," del contexto de persistencia, todos los ",(0,s.jsx)(n.strong,{children:"Employee"})," asociados a ese ",(0,s.jsx)(n.strong,{children:"Department"})," tambi\xe9n se desvincular\xe1n."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@OneToMany(cascade = CascadeType.ALL)\r\nprivate List<Employee> employees;\n"})})]}),(0,s.jsxs)(a,{children:[(0,s.jsx)(n.p,{children:"Propaga todas las operaciones de persistencia, fusi\xf3n, eliminaci\xf3n, refresco y desvinculaci\xf3n."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplo"})}),(0,s.jsxs)(n.p,{children:["Si se realiza cualquier operaci\xf3n en un ",(0,s.jsx)(n.strong,{children:"Department"}),", todos los ",(0,s.jsx)(n.strong,{children:"Employee"})," asociados se ver\xe1n afectados por esa operaci\xf3n."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@OneToMany(cascade = CascadeType.ALL)\r\nprivate List<Employee> employees;\n"})})]})]}),(0,s.jsxs)(a,{color:"blue",children:[(0,s.jsxs)(n.h3,{id:"fetch-type-fetchtype",children:["Fetch Type ",(0,s.jsx)(n.strong,{children:"(FetchType)"})]}),(0,s.jsx)(n.p,{children:"La propiedad FetchType define c\xf3mo y cu\xe1ndo se cargan las entidades relacionadas desde la base de datos:"}),(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h4,{id:"eager",children:"Eager"}),(0,s.jsx)(n.p,{children:"Carga las entidades relacionadas de manera inmediata junto con la entidad principal."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Uso com\xfan"})}),(0,s.jsx)(n.p,{children:"Se usa cuando se necesitan las entidades relacionadas de inmediato, y no importa el costo de rendimiento de cargar m\xe1s datos al principio."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@OneToMany(fetch = FetchType.EAGER)\r\nprivate List<Employee> employees;\n"})})]}),(0,s.jsxs)(a,{children:[(0,s.jsx)(n.h4,{id:"lazy",children:"Lazy"}),(0,s.jsx)(n.p,{children:"Carga las entidades relacionadas solo cuando se accede a ellas por primera vez."}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Uso com\xfan"}),"\r\nSe usa cuando no siempre se necesitan las entidades relacionadas y se quiere evitar el costo de rendimiento de cargar datos adicionales innecesariamente."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@OneToMany(fetch = FetchType.LAZY)\r\nprivate List<Employee> employees;\n"})})]})]})]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>t});var s=a(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);