"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[7682],{3217:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var a=n(4848),s=n(8453);const t={title:"JUnit"},i=void 0,l={id:"Lenguajes de programaci\xf3n/Java/Pruebas unitarias/Dependencias/Dependencias para pruebas/JUnit",title:"JUnit",description:"JUnit es un framework de pruebas unitarias para el lenguaje de programaci\xf3n Java.",source:"@site/docs/Lenguajes de programaci\xf3n/Java/Pruebas unitarias/Dependencias/Dependencias para pruebas/JUnit.md",sourceDirName:"Lenguajes de programaci\xf3n/Java/Pruebas unitarias/Dependencias/Dependencias para pruebas",slug:"/Lenguajes de programaci\xf3n/Java/Pruebas unitarias/Dependencias/Dependencias para pruebas/JUnit",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Pruebas unitarias/Dependencias/Dependencias para pruebas/JUnit",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Lenguajes de programaci\xf3n/Java/Pruebas unitarias/Dependencias/Dependencias para pruebas/JUnit.md",tags:[],version:"current",lastUpdatedBy:"SanRM",lastUpdatedAt:1722011095e3,frontMatter:{title:"JUnit"},sidebar:"tutorialSidebar",previous:{title:"Jacoco",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Pruebas unitarias/Dependencias/Dependencias para cobertura/Jacoco"},next:{title:"Mockito",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Pruebas unitarias/Dependencias/Dependencias para pruebas/Mockito"}},o={},c=[{value:"Instalaci\xf3n",id:"instalaci\xf3n",level:2},{value:"Ejemplo",id:"ejemplo",level:2},{value:"Estructura Given, When, Then",id:"estructura-given-when-then",level:2},{value:"Tipos de aserciones",id:"tipos-de-aserciones",level:2},{value:"Ejemplos reales",id:"ejemplos-reales",level:2}];function u(e){const r={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Card:n,TabItem:t,Tabs:i}=r;return n||p("Card",!0),t||p("TabItem",!0),i||p("Tabs",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"JUnit"})," es un framework de pruebas unitarias para el lenguaje de programaci\xf3n ",(0,a.jsx)(r.strong,{children:"Java"}),"."]}),"\n",(0,a.jsx)(r.p,{children:"Este framework permite la creaci\xf3n de pruebas unitarias de forma sencilla y r\xe1pida, tambi\xe9n proporciona una estructura clara y organizada para las pruebas."}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)(r.h2,{id:"instalaci\xf3n",children:"Instalaci\xf3n"}),(0,a.jsxs)(r.p,{children:["Para instalar JUnit en un proyecto Java, se debe buscar la dependencia ",(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"junit-jupiter"})})," del grupo ",(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"org.junit.jupiter"})})," en el ",(0,a.jsx)(r.a,{href:"https://central.sonatype.com/?smo=true",children:"repositorio central de Maven"})," y agregarla al archivo ",(0,a.jsx)(r.code,{children:"pom.xml"}),"."]}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xml",metastring:"title='pom.xml'",children:"<dependency>\r\n    <groupId>org.junit.jupiter</groupId>\r\n    <artifactId>junit-jupiter</artifactId>\r\n    <version>5.11.0-M2</version> \x3c!-- Reemplaza con la versi\xf3n m\xe1s reciente encontrada --\x3e\r\n</dependency>\n"})})]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)(r.h2,{id:"ejemplo",children:"Ejemplo"}),(0,a.jsx)(r.p,{children:"A continuaci\xf3n se muestra un ejemplo de una prueba unitaria con JUnit."}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",metastring:"title='Ejemplo.java'",children:"\r\npackage com.example.app;\r\n\r\npublic class Ejemplo {\r\n\r\n    public int sumar(int a, int b) {\r\n        return a + b;\r\n    }\r\n\r\n}\r\n\n"})}),(0,a.jsxs)(n,{color:"green",children:[(0,a.jsx)(r.p,{children:"Ejemplo de test unitario aprobado."}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",metastring:"title='EjemploTest.java'",children:"\r\nimport org.junit.jupiter.api.Test;\r\n\r\npublic class EjemploTest {\r\n\r\n    @Test\r\n    public void testSumar() {\r\n\r\n        Ejemplo ejemplo = new Ejemplo();\r\n        int resultado = ejemplo.sumar(4, 4); // 4 + 4 = 8\r\n        assertEquals(8, resultado); // El test pasa porque 8 es igual a 8\r\n\r\n    }\r\n\r\n}\r\n\n"})})]}),(0,a.jsxs)(n,{color:"red",children:[(0,a.jsx)(r.p,{children:"Ejemplo de test unitario fallido."}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",metastring:"title='EjemploTest.java'",children:"\r\nimport org.junit.jupiter.api.Test;\r\n\r\npublic class EjemploTest {\r\n\r\n    @Test\r\n    public void testSumar() {\r\n\r\n        Ejemplo ejemplo = new Ejemplo();\r\n        int resultado = ejemplo.sumar(4, 4); // 4 + 4 = 8\r\n        assertEquals(9, resultado); // El test falla porque 9 no es igual a 8\r\n\r\n    }\r\n\r\n}\r\n\n"})})]})]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)(r.h2,{id:"estructura-given-when-then",children:"Estructura Given, When, Then"}),(0,a.jsxs)(r.p,{children:["La estructura ",(0,a.jsx)(r.strong,{children:"Given, When, Then"})," es una t\xe9cnica utilizada para escribir pruebas unitarias de forma clara y organizada."]}),(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Given"}),": Se proporcionan los datos de entrada y se configura el entorno de la prueba."]}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"When"}),": Se ejecuta el m\xe9todo que se desea probar."]}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Then"}),": Se verifica que el resultado sea el esperado."]}),"\n"]}),"\n"]}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",metastring:"title='Ejemplo'",children:"\r\npackage com.example.app;\r\n\r\nimport org.junit.jupiter.api.Test;\r\n\r\npublic class EjemploTest {\r\n\r\n    @Test\r\n    public void testSumar() {\r\n\r\n        // Given | Se proporcionan los datos de entrada y se configura el entorno de la prueba\r\n        Ejemplo ejemplo = new Ejemplo();\r\n        int a = 4;\r\n        int b = 4;\r\n\r\n        // When | Se ejecuta el m\xe9todo que se desea probar\r\n        int resultado = ejemplo.sumar(a, b);\r\n\r\n        // Then | Se verifica que el resultado sea el esperado\r\n        assertEquals(8, resultado);\r\n\r\n    }\r\n\r\n}\r\n\n"})}),(0,a.jsxs)(r.p,{children:["En el ejemplo anterior, se sigui\xf3 la estructura ",(0,a.jsx)(r.strong,{children:"Given, When, Then"})," para escribir una prueba unitaria del m\xe9todo ",(0,a.jsx)(r.code,{children:"sumar"})," de la clase ",(0,a.jsx)(r.code,{children:"Ejemplo"}),", la prueba es aprobada porque el resultado es el esperado."]})]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)(r.h2,{id:"tipos-de-aserciones",children:"Tipos de aserciones"}),(0,a.jsxs)(r.p,{children:["JUnit proporciona varios m\xe9todos de aserci\xf3n para verificar que los resultados de las pruebas sean los esperados. A continuaci\xf3n se muestran algunos de los m\xe9todos m\xe1s comunes pero hay muchos m\xe1s disponibles, se pueden encontrar en la ",(0,a.jsx)(r.a,{href:"https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/Assertions.html",children:"documentaci\xf3n oficial de JUnit"}),"."]}),(0,a.jsx)(r.admonition,{type:"warning",children:(0,a.jsxs)(r.p,{children:["Para los siguientes ejemplos se tiene en cuenta que la variable ",(0,a.jsx)(r.code,{children:"resultado"})," es igual a 8."]})}),(0,a.jsxs)(n,{color:"darkBlue",children:[(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"assertEquals(expected, actual)"})}),": Verifica que dos valores sean iguales."]}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:"assertEquals(8, resultado); // Verifica que 8 sea igual a resultado, si no son iguales, el test falla\n"})}),(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"assertNotEquals(expected, actual)"})}),": Verifica que dos valores no sean iguales."]}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:"assertNotEquals(9, resultado); // Verifica que 9 no sea igual a resultado, si son iguales, el test falla\n"})})]}),(0,a.jsxs)(n,{color:"magenta",children:[(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"assertTrue(condition)"})}),": Verifica que una condici\xf3n sea verdadera."]}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:"assertTrue(resultado == 8); // Verifica que la condici\xf3n sea verdadera, si es falsa, el test falla\n"})}),(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"assertFalse(condition)"})}),": Verifica que una condici\xf3n sea falsa."]}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:"assertFalse(resultado == 9); // Verifica que la condici\xf3n sea falsa, si es verdadera, el test falla\n"})})]}),(0,a.jsxs)(n,{color:"cyan",children:[(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"assertNull(actual)"})}),": Verifica que un valor sea nulo."]}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:"assertNull(null); // Verifica que el valor sea nulo, si no es nulo, el test falla\n"})}),(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"assertNotNull(actual)"})}),": Verifica que un valor no sea nulo."]}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:"assertNotNull(resultado); // Verifica que el valor no sea nulo, si es nulo, el test falla\n"})})]}),(0,a.jsxs)(n,{color:"pink",children:[(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"assertInstanceOf(expectedType, actual)"})}),": Verifica que un objeto sea una instancia de un tipo espec\xedfico."]}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:"assertInstanceOf(Integer.class, resultado); // Verifica que resultado sea una instancia de Integer, si no lo es, el test falla\n"})}),(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"assertNotInstanceOf(expectedType, actual)"})}),": Verifica que un objeto no sea una instancia de un tipo espec\xedfico."]}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:"assertNotInstanceOf(String.class, resultado); // Verifica que resultado no sea una instancia de String, si lo es, el test falla\n"})})]}),(0,a.jsxs)(n,{color:"yellow",children:[(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"assertThrows(expectedException, executable)"})}),": Verifica que un m\xe9todo lance una excepci\xf3n."]}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:"assertThrows(ArithmeticException.class, () -> {\r\n    int division = 1 / 0; // Lanza una excepci\xf3n de divisi\xf3n por cero\r\n});\n"})})]}),(0,a.jsxs)(n,{children:[(0,a.jsx)(r.h2,{id:"ejemplos-reales",children:"Ejemplos reales"}),(0,a.jsx)(r.p,{children:"Estos son algunos ejemplos de pruebas unitarias utilizando JUnit. (Todos los tests est\xe1n aprobados)."}),(0,a.jsxs)(i,{children:[(0,a.jsxs)(t,{value:"Calculadora",label:"Calculadora",children:[(0,a.jsxs)(r.p,{children:["A continuaci\xf3n se muestra un ejemplo de una clase ",(0,a.jsx)(r.code,{children:"Calculadora"})," con sus respectivas pruebas unitarias utilizando JUnit."]}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",metastring:"title='Calculadora.java'",children:"\r\npackage com.example.app;\r\n\r\npublic class Calculadora {\r\n\r\n    public int sumar(int a, int b) {\r\n        return a + b;\r\n    }\r\n\r\n    public int restar(int a, int b) {\r\n        return a - b;\r\n    }\r\n\r\n    public int multiplicar(int a, int b) {\r\n        return a * b;\r\n    }\r\n\r\n    public int dividir(int a, int b) {\r\n        return a / b;\r\n    }\r\n\r\n}\r\n\n"})}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",metastring:"title='CalculadoraTest.java'",children:"\r\npackage com.example.app;\r\n\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\npublic class CalculadoraTest {\r\n\r\n    @Test\r\n    public void testSumar() {\r\n\r\n        //1. Given\r\n        Calculadora calculadora = new Calculadora();\r\n\r\n        //2. When\r\n        int resultado = calculadora.sumar(4, 4);\r\n\r\n        //3. Then\r\n        assertEquals(8, resultado);\r\n\r\n    }\r\n\r\n    @Test\r\n    public void testRestar() {\r\n\r\n        //1. Given\r\n        Calculadora calculadora = new Calculadora();\r\n\r\n        //2. When\r\n        int resultado = calculadora.restar(4, 4);\r\n\r\n        //3. Then\r\n        assertEquals(0, resultado);\r\n\r\n    }\r\n\r\n    @Test\r\n    public void testMultiplicar() {\r\n\r\n        //1. Given\r\n        Calculadora calculadora = new Calculadora();\r\n\r\n        //2. When\r\n        int resultado = calculadora.multiplicar(4, 4);\r\n\r\n        //3. Then\r\n        assertEquals(16, resultado);\r\n\r\n    }\r\n\r\n    @Test\r\n    public void testDividir() {\r\n\r\n        //1. Given\r\n        Calculadora calculadora = new Calculadora();\r\n\r\n        //2. When\r\n        int resultado = calculadora.dividir(4, 4);\r\n\r\n        //3. Then\r\n        assertEquals(1, resultado);\r\n\r\n    }\r\n\r\n}    \r\n\n"})})]}),(0,a.jsxs)(t,{value:"Ejercicios variados",label:"Ejercicios variados",children:[(0,a.jsxs)(r.p,{children:["Ejemplo de pruebas unitarias para una clase ",(0,a.jsx)(r.code,{children:"Example"})," que contiene varios m\xe9todos con diferentes tipos de pruebas."]}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",metastring:"title='Example.java'",children:'\r\npackage org.example;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class Example {\r\n\r\n    // 1. M\xe9todo para sumar dos n\xfameros\r\n    public int sumar(int a, int b) {\r\n        return a + b;\r\n    }\r\n\r\n    // 2. M\xe9todo que lanza una excepci\xf3n si el argumento es negativo\r\n    public boolean checkPositivo(int numero) {\r\n        if (numero < 0) {\r\n            throw new IllegalArgumentException("El n\xfamero no puede ser negativo");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // 3. M\xe9todo para contar el n\xfamero de letras \'a\' en una cadena\r\n    public int contarLetrasA(String cadena) {\r\n        return (int) cadena.chars()\r\n                .filter(letra -> letra == \'a\')\r\n                .count();\r\n    }\r\n\r\n    // 4. M\xe9todo que retorna un valor booleano si la lista contiene el elemento\r\n    public boolean contieneElemento(List<String> lista, String elemento) {\r\n        return lista.contains(elemento);\r\n    }\r\n\r\n    // 5. M\xe9todo para revertir una cadena\r\n    public String revertirCadena(String cadena) {\r\n        return new StringBuilder(cadena).reverse().toString();\r\n    }\r\n\r\n    // 6. M\xe9todo que calcula el factorial de un n\xfamero\r\n    public long factorial(int numero) {\r\n        if (numero < 0) {\r\n            throw new IllegalArgumentException("Factorial no definido para n\xfameros negativos");\r\n        }\r\n        long resultado = 1;\r\n        for (int i = 1; i <= numero; i++) {\r\n            resultado *= i;\r\n        }\r\n        return resultado;\r\n    }\r\n\r\n    // 7. M\xe9todo para verificar si un n\xfamero es primo\r\n    public boolean esPrimo(int numero) {\r\n        if (numero <= 1) {\r\n            return false;\r\n        }\r\n        for (int i = 2; i * i <= numero; i++) {\r\n            if (numero % i == 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // 8. M\xe9todo que simula un retraso y retorna un mensaje\r\n    public String mensajeConRetraso() throws InterruptedException {\r\n        Thread.sleep(5000);\r\n        return "Listo despu\xe9s de retraso";\r\n    }\r\n\r\n    // 9. M\xe9todo para convertir una lista de enteros a lista de strings\r\n    public List<String> convertirAString(List<Integer> lista) {\r\n        return lista.stream()\r\n                .map(String::valueOf)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    // 10. M\xe9todo que calcula la media de una lista de enteros\r\n    public double calcularMedia(List<Integer> lista) {\r\n        if (lista == null || lista.isEmpty()) {\r\n            throw new IllegalArgumentException("La lista no puede ser nula o vac\xeda");\r\n        }\r\n        return lista.stream()\r\n                .mapToInt(Integer::intValue)\r\n                .average()\r\n                .getAsDouble();\r\n    }\r\n\r\n    // 11. M\xe9todo para convertir una lista de enteros a lista de strings\r\n    public String convertirListaAString(List<String> lista) {\r\n        return lista.stream()\r\n                .map(String::toUpperCase)\r\n                .collect(Collectors.joining(","));\r\n    }\r\n}\r\n\n'})}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",metastring:"title='ExampleTest.java'",children:'\r\npackage org.example;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\npublic class ExampleTest {\r\n\r\n    private Example example;\r\n\r\n    @BeforeEach\r\n    public void init() {\r\n        this.example = new Example();\r\n    }\r\n\r\n    @Test\r\n    public void testSumar() {\r\n        // Given - Teniendo\r\n        int numberA = 3;\r\n        int numberB = 3;\r\n\r\n        // When - Cuando\r\n        int result = example.sumar(numberA, numberB);\r\n\r\n        // Then - Entonces\r\n        assertNotNull(result);\r\n        assertEquals(6, result);\r\n        assertInstanceOf(Integer.class, result);\r\n    }\r\n\r\n    @Test\r\n    public void testCheckPositivo() {\r\n        // Given - Teniendo\r\n        int number = 4;\r\n\r\n        // When - Cuando\r\n        boolean result = example.checkPositivo(number);\r\n\r\n        // Then - Entonces\r\n        assertTrue(result);\r\n    }\r\n\r\n    @Test\r\n    public void testCheckPositivoError() {\r\n        // Given\r\n        int number = -4;\r\n\r\n        // Then\r\n        assertThrows(IllegalArgumentException.class, () -> {\r\n            example.checkPositivo(number);\r\n        });\r\n    }\r\n\r\n    @Test\r\n    public void testContarLetrasA() {\r\n        // Given\r\n        String cadena = "unprogramadornace";\r\n\r\n        // When\r\n        int result = example.contarLetrasA(cadena);\r\n\r\n        // Then\r\n        assertNotNull(result);\r\n        assertEquals(3, result);\r\n    }\r\n\r\n    @Test\r\n    public void testContieneElemento() {\r\n        // Given\r\n        List<String> countries = List.of("Colombia", "Mexico", "Peru");\r\n        String country = "Colombia";\r\n\r\n        // When\r\n        boolean result = this.example.contieneElemento(countries, country);\r\n\r\n        // Then\r\n        assertTrue(result);\r\n    }\r\n\r\n    @Test\r\n    public void testRevertirCadena() {\r\n        // Given\r\n        String cadena = "carro"; // orrac\r\n\r\n        // When\r\n        String result = this.example.revertirCadena(cadena);\r\n\r\n        // Then\r\n        assertEquals("orrac", result);\r\n    }\r\n\r\n    @Test\r\n    public void testFactorial() {\r\n        // Given\r\n        int number = 6;\r\n\r\n        // When\r\n        long result = this.example.factorial(number);\r\n\r\n        // Then\r\n        assertEquals(720, result);\r\n    }\r\n\r\n    @Test\r\n    public void testFactorialError() {\r\n        // Given\r\n        int number = -6;\r\n\r\n        // When - Then\r\n        assertThrows(IllegalArgumentException.class, () -> {\r\n            this.example.factorial(number);\r\n        });\r\n    }\r\n\r\n    @Test\r\n    public void testEsPrimo() {\r\n        // Given\r\n        int number = 3;\r\n\r\n        // When\r\n        boolean result = this.example.esPrimo(number);\r\n\r\n        // Then\r\n        assertTrue(result);\r\n    }\r\n\r\n    @Test\r\n    public void testEsPrimoMayorACuatro() {\r\n        // Given\r\n        int number = 7;\r\n\r\n        // When\r\n        boolean result = this.example.esPrimo(number);\r\n\r\n        // Then\r\n        assertTrue(result);\r\n    }\r\n\r\n    @Test\r\n    public void testEsPrimoMenorQueUno() {\r\n        // Given\r\n        int number = 1;\r\n\r\n        // When\r\n        boolean result = this.example.esPrimo(number);\r\n\r\n        // Then\r\n        assertFalse(result);\r\n    }\r\n\r\n    @Test\r\n    public void testNoEsPrimo() {\r\n        // Given\r\n        int number = 9;\r\n\r\n        // When\r\n        boolean result = this.example.esPrimo(number);\r\n\r\n        // Then\r\n        assertFalse(result);\r\n    }\r\n\r\n    @Test\r\n    public void testMensajeConRetraso() throws InterruptedException {\r\n        // When\r\n        String result = this.example.mensajeConRetraso();\r\n\r\n        // Then\r\n        assertEquals("Listo despu\xe9s de retraso", result);\r\n    }\r\n\r\n    @Test\r\n    public void testConvertirAString() {\r\n        // Given\r\n        List<Integer> numbers = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\r\n\r\n        // When\r\n        List<String> result = this.example.convertirAString(numbers);\r\n\r\n        // Then\r\n        assertEquals(List.of("1", "2", "3", "4", "5", "6", "7", "8", "9", "10"), result);\r\n    }\r\n\r\n    @Test\r\n    public void testCalcularMedia() {\r\n        // Given\r\n        List<Integer> numbers = List.of(1, 2, 3);\r\n\r\n        // When\r\n        double result = this.example.calcularMedia(numbers);\r\n\r\n        // Then\r\n        assertEquals(2, result);\r\n    }\r\n\r\n    @Test\r\n    public void testCalcularMediaNull() {\r\n        // Given\r\n        List<Integer> numbers = null;\r\n\r\n        // When - Then\r\n        assertThrows(IllegalArgumentException.class, () -> {\r\n            this.example.calcularMedia(numbers);\r\n        });\r\n    }\r\n\r\n    @Test\r\n    public void testCalcularMediaEmpty() {\r\n        // Given\r\n        List<Integer> numbers = Collections.emptyList();\r\n\r\n        // When - Then\r\n        assertThrows(IllegalArgumentException.class, () -> {\r\n            this.example.calcularMedia(numbers);\r\n        });\r\n    }\r\n\r\n}\r\n\n'})})]}),(0,a.jsxs)(t,{value:"Banco",label:"Cuenta bancaria",children:[(0,a.jsxs)(r.p,{children:["Ejemplo de pruebas unitarias para una clase ",(0,a.jsx)(r.code,{children:"CuentaBancaria"})," que contiene varios m\xe9todos con diferentes tipos de pruebas."]}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",metastring:"title='CuentaBancaria.java'",children:'\r\npackage org.example;\r\n\r\npublic class CuentaBancaria {\r\n\r\n    private double saldo;\r\n\r\n    public CuentaBancaria(double saldo) {\r\n        this.saldo = saldo;\r\n    }\r\n\r\n    public double getSaldo() {\r\n        return saldo;\r\n    }\r\n\r\n    public void depositar(double cantidad) {\r\n        if (cantidad <= 0) {\r\n            throw new IllegalArgumentException("La cantidad a depositar debe ser mayor a cero");\r\n        }\r\n        saldo += cantidad;\r\n    }\r\n\r\n    public void retirar(double cantidad) {\r\n        if (cantidad <= 0) {\r\n            throw new IllegalArgumentException("La cantidad a retirar debe ser mayor a cero");\r\n        }\r\n        if (cantidad > saldo) {\r\n            throw new IllegalArgumentException("No hay suficiente saldo para retirar");\r\n        }\r\n        saldo -= cantidad;\r\n    }\r\n\r\n}\r\n\n'})}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",metastring:"title='CuentaBancariaTest.java'",children:"\r\npackage org.example;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\n\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\npublic class CuentaBancariaTest {\r\n\r\n    private CuentaBancaria cuentaBancaria;\r\n\r\n    @BeforeEach\r\n    public void init() {\r\n        this.cuentaBancaria = new CuentaBancaria(1000);\r\n    }\r\n\r\n    @Test\r\n    public void testGetSaldo() {\r\n        // Given\r\n        double saldo = this.cuentaBancaria.getSaldo();\r\n\r\n        // Then\r\n        assertEquals(1000, saldo);\r\n    }\r\n\r\n    @Test\r\n    public void testDepositar() {\r\n        // Given\r\n        double cantidad = 500;\r\n\r\n        // When\r\n        this.cuentaBancaria.depositar(cantidad);\r\n\r\n        // Then\r\n        assertEquals(1500, this.cuentaBancaria.getSaldo());\r\n    }\r\n\r\n    @Test\r\n    public void testDepositarError() {\r\n        // Given\r\n        double cantidad = -500;\r\n\r\n        // When - Then\r\n        assertThrows(IllegalArgumentException.class, () -> {\r\n            this.cuentaBancaria.depositar(cantidad);\r\n        });\r\n    }\r\n\r\n    @Test\r\n    public void testRetirar() {\r\n        // Given\r\n        double cantidad = 500;\r\n\r\n        // When\r\n        this.cuentaBancaria.retirar(cantidad);\r\n\r\n        // Then\r\n        assertEquals(500, this.cuentaBancaria.getSaldo());\r\n    }\r\n\r\n    @Test\r\n    public void testRetirarError() {\r\n        // Given\r\n        double cantidad = 1500;\r\n\r\n        // When - Then\r\n        assertThrows(IllegalArgumentException.class, () -> {\r\n            this.cuentaBancaria.retirar(cantidad);\r\n        });\r\n    }\r\n\r\n    @Test\r\n    public void testRetirarErrorCantidadNegativa() {\r\n        // Given\r\n        double cantidad = -500;\r\n\r\n        // When - Then\r\n        assertThrows(IllegalArgumentException.class, () -> {\r\n            this.cuentaBancaria.retirar(cantidad);\r\n        });\r\n    }\r\n\r\n}\r\n\n"})})]})]})]})]})]})}function d(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}function p(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>l});var a=n(6540);const s={},t=a.createContext(s);function i(e){const r=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(t.Provider,{value:r},e.children)}}}]);