"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[8185],{1413:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>d,metadata:()=>i,toc:()=>c});var r=n(4848),l=n(8453);const d={sidebar_position:6},s=void 0,i={id:"Frameworks/Angular/Enlace de propiedades",title:"Enlace de propiedades",description:"Enlace de Propiedades en Angular",source:"@site/docs/Frameworks/Angular/Enlace de propiedades.md",sourceDirName:"Frameworks/Angular",slug:"/Frameworks/Angular/Enlace de propiedades",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Enlace de propiedades",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Frameworks/Angular/Enlace de propiedades.md",tags:[],version:"current",lastUpdatedBy:"SanRM",lastUpdatedAt:1730660085e3,sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Control de flujo @for",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Control de flujo @for"},next:{title:"Eventos",permalink:"/notas-de-aprendizaje/docs/Frameworks/Angular/Eventos"}},o={},c=[{value:"Enlace de Propiedades en Angular",id:"enlace-de-propiedades-en-angular",level:3},{value:"Ejemplo: Uso del Enlace de Propiedades en Angular",id:"ejemplo-uso-del-enlace-de-propiedades-en-angular",level:3},{value:"Paso 1: Comprender el Enlace de Propiedades",id:"paso-1-comprender-el-enlace-de-propiedades",level:4},{value:"Paso 2: Agregar una Propiedad <code>isEditable</code>",id:"paso-2-agregar-una-propiedad-iseditable",level:4},{value:"Paso 3: Enlazar el Atributo <code>contentEditable</code>",id:"paso-3-enlazar-el-atributo-contenteditable",level:4},{value:"Diferencia entre Declarar una variable normal de clase y usar el enlace de propiedades en Angular",id:"diferencia-entre-declarar-una-variable-normal-de-clase-y-usar-el-enlace-de-propiedades-en-angular",level:2},{value:"1. <strong>Declarar una Variable Normal de Clase</strong>",id:"1-declarar-una-variable-normal-de-clase",level:3},{value:"2. <strong>Enlace de Propiedades</strong>",id:"2-enlace-de-propiedades",level:3},{value:"Resumen",id:"resumen",level:3}];function t(e){const a={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components},{Card:n}=a;return n||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h3,{id:"enlace-de-propiedades-en-angular",children:"Enlace de Propiedades en Angular"}),"\n",(0,r.jsxs)(a.p,{children:["El ",(0,r.jsx)(a.strong,{children:"enlace de propiedades"})," (Property Binding) en Angular permite establecer valores para las propiedades de elementos HTML, componentes de Angular y m\xe1s. Esta t\xe9cnica es fundamental para la interacci\xf3n din\xe1mica dentro de las aplicaciones, ya que permite modificar caracter\xedsticas de los elementos de manera program\xe1tica."]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)(a.h3,{id:"ejemplo-uso-del-enlace-de-propiedades-en-angular",children:"Ejemplo: Uso del Enlace de Propiedades en Angular"}),(0,r.jsxs)(n,{children:[(0,r.jsx)(a.h4,{id:"paso-1-comprender-el-enlace-de-propiedades",children:"Paso 1: Comprender el Enlace de Propiedades"}),(0,r.jsx)(a.p,{children:"El enlace de propiedades se utiliza para asignar din\xe1micamente valores a propiedades y atributos. Esto puede incluir funcionalidades como alternar caracter\xedsticas de botones, establecer rutas de im\xe1genes o compartir valores entre componentes."}),(0,r.jsx)(a.p,{children:"Para enlazar el atributo de un elemento, simplemente envolvemos el nombre del atributo en corchetes cuadrados. Aqu\xed hay un ejemplo b\xe1sico:"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-html",children:'<img alt="photo" [src]="imageURL">\n'})}),(0,r.jsxs)(a.p,{children:["En este caso, el valor del atributo ",(0,r.jsx)(a.code,{children:"src"})," estar\xe1 vinculado a la propiedad ",(0,r.jsx)(a.code,{children:"imageURL"})," de la clase del componente. Esto significa que cualquier valor que tenga ",(0,r.jsx)(a.code,{children:"imageURL"})," se establecer\xe1 como el atributo ",(0,r.jsx)(a.code,{children:"src"})," de la etiqueta ",(0,r.jsx)(a.code,{children:"<img>"}),"."]})]}),(0,r.jsxs)(n,{children:[(0,r.jsxs)(a.h4,{id:"paso-2-agregar-una-propiedad-iseditable",children:["Paso 2: Agregar una Propiedad ",(0,r.jsx)(a.code,{children:"isEditable"})]}),(0,r.jsxs)(a.p,{children:["Ahora, actualizaremos la clase ",(0,r.jsx)(a.code,{children:"AppComponent"})," para incluir una propiedad llamada ",(0,r.jsx)(a.code,{children:"isEditable"}),", con un valor inicial establecido en ",(0,r.jsx)(a.code,{children:"true"}),":"]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:"export class AppComponent {\r\n    isEditable = true;\r\n}\n"})}),(0,r.jsxs)(a.p,{children:["Esta propiedad ",(0,r.jsx)(a.code,{children:"isEditable"})," se utilizar\xe1 para determinar si un elemento es editable o no. Con esto, podemos controlar din\xe1micamente la capacidad de edici\xf3n del contenido en la vista."]})]}),(0,r.jsxs)(n,{children:[(0,r.jsxs)(a.h4,{id:"paso-3-enlazar-el-atributo-contenteditable",children:["Paso 3: Enlazar el Atributo ",(0,r.jsx)(a.code,{children:"contentEditable"})]}),(0,r.jsxs)(a.p,{children:["A continuaci\xf3n, enlazaremos el atributo ",(0,r.jsx)(a.code,{children:"contentEditable"})," de un ",(0,r.jsx)(a.code,{children:"<div>"})," a la propiedad ",(0,r.jsx)(a.code,{children:"isEditable"})," usando la sintaxis de corchetes cuadrados ",(0,r.jsx)(a.code,{children:"[]"}),":"]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:'@Component({\r\n    ...\r\n    template: `<div [contentEditable]="isEditable"></div>`,\r\n})\n'})}),(0,r.jsxs)(a.p,{children:["Con este c\xf3digo, el ",(0,r.jsx)(a.code,{children:"<div>"})," ser\xe1 editable si ",(0,r.jsx)(a.code,{children:"isEditable"})," es ",(0,r.jsx)(a.code,{children:"true"}),". Esto permite al usuario modificar el contenido del ",(0,r.jsx)(a.code,{children:"<div>"})," directamente en la interfaz. \xa1Buen trabajo! \ud83d\udc4d"]})]})]}),"\n",(0,r.jsxs)(n,{color:"green",children:[(0,r.jsx)(a.h2,{id:"diferencia-entre-declarar-una-variable-normal-de-clase-y-usar-el-enlace-de-propiedades-en-angular",children:"Diferencia entre Declarar una variable normal de clase y usar el enlace de propiedades en Angular"}),(0,r.jsx)(a.p,{children:"La diferencia entre declarar una variable normal de clase y usar el enlace de propiedades en Angular radica principalmente en c\xf3mo se utilizan y se actualizan los valores en la interfaz de usuario."}),(0,r.jsxs)(n,{children:[(0,r.jsxs)(a.h3,{id:"1-declarar-una-variable-normal-de-clase",children:["1. ",(0,r.jsx)(a.strong,{children:"Declarar una Variable Normal de Clase"})]}),(0,r.jsx)(a.p,{children:"Cuando declaras una variable normal en la clase de un componente, est\xe1s creando una propiedad que puede almacenar un valor, pero este valor no se refleja autom\xe1ticamente en la vista. Para cambiar el valor en la interfaz de usuario, necesitar\xedas hacer una actualizaci\xf3n manual y, en muchos casos, necesitar\xedas forzar una nueva detecci\xf3n de cambios."}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Ejemplo:"})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:"export class AppComponent {\r\n    myVariable = 'Hello';\r\n\r\n    changeVariable() {\r\n        this.myVariable = 'Goodbye';\r\n        // Aqu\xed necesitar\xedas alg\xfan mecanismo para actualizar la vista si no est\xe1s usando bindings.\r\n    }\r\n}\n"})}),(0,r.jsxs)(a.p,{children:["En este caso, si solo declaras ",(0,r.jsx)(a.code,{children:"myVariable"})," y no la enlazas a la vista, los cambios no se reflejar\xe1n autom\xe1ticamente en la interfaz de usuario."]})]}),(0,r.jsxs)(n,{children:[(0,r.jsxs)(a.h3,{id:"2-enlace-de-propiedades",children:["2. ",(0,r.jsx)(a.strong,{children:"Enlace de Propiedades"})]}),(0,r.jsxs)(a.p,{children:["El enlace de propiedades, por otro lado, permite que la propiedad en la clase est\xe9 vinculada directamente a un atributo de un elemento en la plantilla. Cuando cambias el valor de la propiedad en la clase, la vista se actualiza autom\xe1ticamente. Este mecanismo es parte de la ",(0,r.jsx)(a.strong,{children:"detenci\xf3n de cambios"})," de Angular, que mantiene sincronizados los datos entre el modelo (la clase) y la vista (el HTML)."]}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Ejemplo:"})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-typescript",children:"export class AppComponent {\r\n    isEditable = true;\r\n\r\n    toggleEditable() {\r\n        this.isEditable = !this.isEditable; // Cambia el estado de editable\r\n    }\r\n}\r\n        \n"})}),(0,r.jsxs)(a.p,{children:["En este caso, si ",(0,r.jsx)(a.code,{children:"isEditable"})," cambia a ",(0,r.jsx)(a.code,{children:"false"}),", el atributo ",(0,r.jsx)(a.code,{children:"contentEditable"})," en la plantilla se actualizar\xe1 autom\xe1ticamente, haciendo que el ",(0,r.jsx)(a.code,{children:"<div>"})," ya no sea editable."]})]}),(0,r.jsxs)(n,{children:[(0,r.jsx)(a.h3,{id:"resumen",children:"Resumen"}),(0,r.jsx)(a.p,{children:"En resumen, el enlace de propiedades facilita la interacci\xf3n din\xe1mica entre el modelo y la vista, haciendo que el desarrollo en Angular sea m\xe1s eficiente y menos propenso a errores."})]})]}),"\n",(0,r.jsxs)(a.p,{children:["El enlace de propiedades es una de las muchas caracter\xedsticas poderosas de Angular. Permite a los desarrolladores crear aplicaciones m\xe1s din\xe1micas y reactivas al vincular propiedades de manera efectiva. Para obtener m\xe1s informaci\xf3n sobre el enlace de propiedades y otras caracter\xedsticas de Angular, puedes consultar la ",(0,r.jsx)(a.a,{href:"https://angular.io/docs",children:"documentaci\xf3n de Angular"}),"."]})]})}function p(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>i});var r=n(6540);const l={},d=r.createContext(l);function s(e){const a=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),r.createElement(d.Provider,{value:a},e.children)}}}]);