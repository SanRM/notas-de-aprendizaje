"use strict";(self.webpackChunknotas_personales=self.webpackChunknotas_personales||[]).push([[2334],{1025:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>t,metadata:()=>s,toc:()=>d});var a=i(4848),r=i(8453);const t={sidebar_position:6},o=void 0,s={id:"Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/AuthenticationProvider",title:"AuthenticationProvider",description:"Un AuthenticationProvider es una interfaz en Spring Security que realiza la autenticaci\xf3n (es decir, valida las credenciales de un usuario). Hay varios tipos de AuthenticationProviders, y cada uno puede manejar diferentes formas de autenticaci\xf3n. Por ejemplo, uno puede autenticar mediante nombre de usuario y contrase\xf1a, mientras que otro puede validar un token JWT (JSON Web Token).",source:"@site/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/AuthenticationProvider.md",sourceDirName:"Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n",slug:"/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/AuthenticationProvider",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/AuthenticationProvider",draft:!1,unlisted:!1,editUrl:"https://github.com/SanRM/notas-de-aprendizaje/edit/main/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/AuthenticationProvider.md",tags:[],version:"current",lastUpdatedBy:"SanRM",lastUpdatedAt:1729354227e3,sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"ProviderManager",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/ProviderManager"},next:{title:"AuthenticationEntryPoint",permalink:"/notas-de-aprendizaje/docs/Lenguajes de programaci\xf3n/Java/Spring/Spring Security/Autenticaci\xf3n/Arquitectura de la autenticaci\xf3n/AuthenticationEntryPoint"}},c={},d=[{value:"M\xfaltiples AuthenticationProviders en ProviderManager",id:"m\xfaltiples-authenticationproviders-en-providermanager",level:3},{value:"Proceso de Autenticaci\xf3n con M\xfaltiples AuthenticationProviders",id:"proceso-de-autenticaci\xf3n-con-m\xfaltiples-authenticationproviders",level:4},{value:"Ejemplos de AuthenticationProviders",id:"ejemplos-de-authenticationproviders",level:4}];function u(e){const n={h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Card:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Card",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Un ",(0,a.jsx)(n.strong,{children:"AuthenticationProvider"})," es una interfaz en Spring Security que realiza la autenticaci\xf3n (es decir, valida las credenciales de un usuario). Hay varios tipos de ",(0,a.jsx)(n.strong,{children:"AuthenticationProviders"}),", y cada uno puede manejar diferentes formas de autenticaci\xf3n. Por ejemplo, uno puede autenticar mediante nombre de usuario y contrase\xf1a, mientras que otro puede validar un token JWT (JSON Web Token)."]}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsx)(n.h3,{id:"m\xfaltiples-authenticationproviders-en-providermanager",children:"M\xfaltiples AuthenticationProviders en ProviderManager"}),(0,a.jsxs)(n.p,{children:["Una caracter\xedstica clave de Spring Security es que puedes inyectar varios ",(0,a.jsx)(n.strong,{children:"AuthenticationProviders"})," en una clase llamada ",(0,a.jsx)(n.strong,{children:"ProviderManager"}),". El ",(0,a.jsx)(n.strong,{children:"ProviderManager"})," es responsable de coordinar la autenticaci\xf3n y delega el trabajo a los ",(0,a.jsx)(n.strong,{children:"AuthenticationProviders"})," que has configurado."]})]}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsx)(n.h4,{id:"proceso-de-autenticaci\xf3n-con-m\xfaltiples-authenticationproviders",children:"Proceso de Autenticaci\xf3n con M\xfaltiples AuthenticationProviders"}),(0,a.jsx)(i,{children:(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Configuraci\xf3n de M\xfaltiples Providers"}),": Puedes tener diferentes ",(0,a.jsx)(n.strong,{children:"AuthenticationProviders"})," para distintos m\xe9todos de autenticaci\xf3n. Por ejemplo, puedes tener uno para autenticaci\xf3n de usuarios con nombre de usuario y contrase\xf1a (como ",(0,a.jsx)(n.strong,{children:"DaoAuthenticationProvider"}),") y otro para tokens JWT (como ",(0,a.jsx)(n.strong,{children:"JwtAuthenticationProvider"}),")."]}),"\n"]})}),(0,a.jsx)(i,{children:(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"ProviderManager Maneja la Solicitud"}),": Cuando un usuario intenta autenticarse, el ",(0,a.jsx)(n.strong,{children:"ProviderManager"})," recibe las credenciales o el token que el usuario ha enviado."]}),"\n"]})}),(0,a.jsx)(i,{children:(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Delegaci\xf3n a los Providers"}),": El ",(0,a.jsx)(n.strong,{children:"ProviderManager"})," prueba uno por uno los ",(0,a.jsx)(n.strong,{children:"AuthenticationProviders"})," que has configurado. Cada ",(0,a.jsx)(n.strong,{children:"AuthenticationProvider"})," verifica si puede manejar el tipo de autenticaci\xf3n que se ha solicitado.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Si un ",(0,a.jsx)(n.strong,{children:"AuthenticationProvider"})," puede manejar la autenticaci\xf3n, lo har\xe1 validando las credenciales o el token."]}),"\n",(0,a.jsxs)(n.li,{children:["Si no puede, pasa la solicitud al siguiente ",(0,a.jsx)(n.strong,{children:"AuthenticationProvider"})," en la lista."]}),"\n"]}),"\n"]}),"\n"]})})]}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsx)(n.h4,{id:"ejemplos-de-authenticationproviders",children:"Ejemplos de AuthenticationProviders"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"DaoAuthenticationProvider"}),": Este es un ",(0,a.jsx)(n.strong,{children:"AuthenticationProvider"})," que se utiliza cuando est\xe1s autenticando a usuarios con nombre de usuario y contrase\xf1a. Generalmente, este provider consulta una base de datos para verificar si las credenciales del usuario son correctas."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"JwtAuthenticationProvider"}),": Este se utiliza para autenticaci\xf3n basada en tokens JWT. Un token JWT contiene informaci\xf3n sobre el usuario (como su identidad y permisos), y este provider valida que el token sea correcto."]}),"\n"]}),"\n"]})]}),"\n",(0,a.jsxs)(n.p,{children:["El uso de m\xfaltiples ",(0,a.jsx)(n.strong,{children:"AuthenticationProviders"})," en Spring Security es una forma eficiente de manejar diferentes tipos de autenticaci\xf3n en tu aplicaci\xf3n. Gracias al ",(0,a.jsx)(n.strong,{children:"ProviderManager"}),", puedes coordinar f\xe1cilmente varios providers y asegurarte de que cada tipo de autenticaci\xf3n se maneje adecuadamente. \xa1Espero que esta explicaci\xf3n detallada te haya aclarado el concepto! Si tienes m\xe1s preguntas, no dudes en hacerlas."]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>s});var a=i(6540);const r={},t=a.createContext(r);function o(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);